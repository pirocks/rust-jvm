use std::collections::HashMap;
use std::num::NonZeroU8;

use itertools::Either;

use crate::classfile::{Atype, CPIndex, IInc, LookupSwitch, TableSwitch, Wide};
use crate::compressed_classfile::{CCString, CFieldDescriptor, CMethodDescriptor, CPDType, CPRefType};
use crate::compressed_classfile::names::{CClassName, FieldName, MethodName};

pub type CInstruction = CompressedInstruction;

#[derive(Debug)]
pub struct CompressedInstruction {
    pub offset: u16,
    pub instruction_size: u8,
    pub info: CompressedInstructionInfo,
}

pub type CInstructionInfo = CompressedInstructionInfo;

#[allow(non_camel_case_types)]
#[derive(Debug)]
pub enum CompressedInstructionInfo {
    aaload,
    aastore,
    aconst_null,
    aload(u8),
    aload_0,
    aload_1,
    aload_2,
    aload_3,
    anewarray(CPDType),
    areturn,
    arraylength,
    astore(u8),
    astore_0,
    astore_1,
    astore_2,
    astore_3,
    athrow,
    baload,
    bastore,
    bipush(u8),
    caload,
    castore,
    checkcast(CPDType),
    d2f,
    d2i,
    d2l,
    dadd,
    daload,
    dastore,
    dcmpg,
    dcmpl,
    dconst_0,
    dconst_1,
    ddiv,
    dload(u8),
    dload_0,
    dload_1,
    dload_2,
    dload_3,
    dmul,
    dneg,
    drem,
    dreturn,
    dstore(u8),
    dstore_0,
    dstore_1,
    dstore_2,
    dstore_3,
    dsub,
    dup,
    dup_x1,
    dup_x2,
    dup2,
    dup2_x1,
    dup2_x2,
    f2d,
    f2i,
    f2l,
    fadd,
    faload,
    fastore,
    fcmpg,
    fcmpl,
    fconst_0,
    fconst_1,
    fconst_2,
    fdiv,
    fload(u8),
    fload_0,
    fload_1,
    fload_2,
    fload_3,
    fmul,
    fneg,
    frem,
    freturn,
    fstore(u8),
    fstore_0,
    fstore_1,
    fstore_2,
    fstore_3,
    fsub,
    getfield {
        name: FieldName,
        desc: CFieldDescriptor,
        target_class: CClassName,
    },
    getstatic {
        name: FieldName,
        desc: CFieldDescriptor,
        target_class: CClassName,
    },
    goto_(i16),
    goto_w(i32),
    i2b,
    i2c,
    i2d,
    i2f,
    i2l,
    i2s,
    iadd,
    iaload,
    iand,
    iastore,
    iconst_m1,
    iconst_0,
    iconst_1,
    iconst_2,
    iconst_3,
    iconst_4,
    iconst_5,
    idiv,
    if_acmpeq(i16),
    if_acmpne(i16),
    if_icmpeq(i16),
    if_icmpne(i16),
    if_icmplt(i16),
    if_icmpge(i16),
    if_icmpgt(i16),
    if_icmple(i16),
    ifeq(i16),
    ifne(i16),
    iflt(i16),
    ifge(i16),
    ifgt(i16),
    ifle(i16),
    ifnonnull(i16),
    ifnull(i16),
    iinc(IInc),
    iload(u8),
    iload_0,
    iload_1,
    iload_2,
    iload_3,
    imul,
    ineg,
    instanceof(CPDType),
    invokedynamic(CPIndex),
    invokeinterface {
        method_name: MethodName,
        descriptor: CMethodDescriptor,
        classname_ref_type: CPRefType,
        count: NonZeroU8,
    },
    invokespecial {
        method_name: MethodName,
        descriptor: CMethodDescriptor,
        classname_ref_type: CPRefType,
    },
    invokestatic {
        method_name: MethodName,
        descriptor: CMethodDescriptor,
        classname_ref_type: CPRefType,
    },
    invokevirtual {
        method_name: MethodName,
        descriptor: CMethodDescriptor,
        classname_ref_type: CPRefType,
    },
    ior,
    irem,
    ireturn,
    ishl,
    ishr,
    istore(u8),
    istore_0,
    istore_1,
    istore_2,
    istore_3,
    isub,
    iushr,
    ixor,
    jsr(i16),
    jsr_w(i32),
    l2d,
    l2f,
    l2i,
    ladd,
    laload,
    land,
    lastore,
    lcmp,
    lconst_0,
    lconst_1,
    ldc(Either<CompressedLdcW, CompressedLdc2W>),
    ldc_w(CompressedLdcW),
    ldc2_w(CompressedLdc2W),
    ldiv,
    lload(u8),
    lload_0,
    lload_1,
    lload_2,
    lload_3,
    lmul,
    lneg,
    lookupswitch(LookupSwitch),
    lor,
    lrem,
    lreturn,
    lshl,
    lshr,
    lstore(u8),
    lstore_0,
    lstore_1,
    lstore_2,
    lstore_3,
    lsub,
    lushr,
    lxor,
    monitorenter,
    monitorexit,
    multianewarray {
        type_: CPDType,
        dimensions: NonZeroU8,
    },
    new(CClassName),
    newarray(Atype),
    nop,
    pop,
    pop2,
    putfield {
        name: FieldName,
        desc: CFieldDescriptor,
        target_class: CClassName,
    },
    putstatic {
        name: FieldName,
        desc: CFieldDescriptor,
        target_class: CClassName,
    },
    ret(u8),
    return_,
    saload,
    sastore,
    sipush(u16),
    swap,
    tableswitch(Box<TableSwitch>),
    wide(Wide),
    EndOfCode,
}

#[derive(Debug)]
pub enum CompressedLdcW {
    String {
        str: CCString
    },
    Class {
        name: CClassName
    },
    Float {
        float: f32
    },
    Integer {
        integer: i32
    },
    MethodType {},
    MethodHandle {},
    LiveObject(usize),
}

#[derive(Debug)]
pub enum CompressedLdc2W {
    Long(i64),
    Double(f64),
}

pub struct CompressedInvokeInterface {}

pub struct CompressedCode {
    pub instructions: HashMap<u16, CompressedInstruction>,
    pub max_locals: u16,
    pub max_stack: u16,
    pub exception_table: Vec<CompressedExceptionTableElem>,
}

#[derive(Debug)]
#[derive(Eq, PartialEq, Clone)]
pub struct CompressedExceptionTableElem {
    pub start_pc: u16,
    pub end_pc: u16,
    pub handler_pc: u16,
    pub catch_type: Option<CClassName>,
}
