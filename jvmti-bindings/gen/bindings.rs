/* automatically generated by rust-bindgen */

# [ repr ( C ) ] # [ derive ( Copy , Clone , Debug , Default , Eq , Hash , Ord , PartialEq , PartialOrd ) ] pub struct __BindgenBitfieldUnit < Storage , Align > { storage : Storage , align : [ Align ; 0 ] , } impl < Storage , Align > __BindgenBitfieldUnit < Storage , Align > { # [ inline ] pub const fn new ( storage : Storage ) -> Self { Self { storage , align : [ ] } } } impl < Storage , Align > __BindgenBitfieldUnit < Storage , Align > where Storage : AsRef < [ u8 ] > + AsMut < [ u8 ] >, { # [ inline ] pub fn get_bit ( & self , index : usize ) -> bool { debug_assert ! ( index / 8 < self . storage . as_ref ( ) . len ( ) ) ; let byte_index = index / 8 ; let byte = self . storage . as_ref ( ) [ byte_index ] ; let bit_index = if cfg ! ( target_endian = "big" ) { 7 - ( index % 8 ) } else { index % 8 } ; let mask = 1 << bit_index ; byte & mask == mask } # [ inline ] pub fn set_bit ( & mut self , index : usize , val : bool ) { debug_assert ! ( index / 8 < self . storage . as_ref ( ) . len ( ) ) ; let byte_index = index / 8 ; let byte = & mut self . storage . as_mut ( ) [ byte_index ] ; let bit_index = if cfg ! ( target_endian = "big" ) { 7 - ( index % 8 ) } else { index % 8 } ; let mask = 1 << bit_index ; if val { * byte |= mask ; } else { * byte &= ! mask ; } } # [ inline ] pub fn get ( & self , bit_offset : usize , bit_width : u8 ) -> u64 { debug_assert ! ( bit_width <= 64 ) ; debug_assert ! ( bit_offset / 8 < self . storage . as_ref ( ) . len ( ) ) ; debug_assert ! ( ( bit_offset + ( bit_width as usize ) ) / 8 <= self . storage . as_ref ( ) . len ( ) ) ; let mut val = 0 ; for i in 0 .. ( bit_width as usize ) { if self . get_bit ( i + bit_offset ) { let index = if cfg ! ( target_endian = "big" ) { bit_width as usize - 1 - i } else { i } ; val |= 1 << index ; } } val } # [ inline ] pub fn set ( & mut self , bit_offset : usize , bit_width : u8 , val : u64 ) { debug_assert ! ( bit_width <= 64 ) ; debug_assert ! ( bit_offset / 8 < self . storage . as_ref ( ) . len ( ) ) ; debug_assert ! ( ( bit_offset + ( bit_width as usize ) ) / 8 <= self . storage . as_ref ( ) . len ( ) ) ; for i in 0 .. ( bit_width as usize ) { let mask = 1 << i ; let val_bit_is_set = val & mask == mask ; let index = if cfg ! ( target_endian = "big" ) { bit_width as usize - 1 - i } else { i } ; self . set_bit ( index + bit_offset , val_bit_is_set ) ; } } } pub const _STDIO_H : u32 = 1 ; pub const _FEATURES_H : u32 = 1 ; pub const _DEFAULT_SOURCE : u32 = 1 ; pub const __USE_ISOC11 : u32 = 1 ; pub const __USE_ISOC99 : u32 = 1 ; pub const __USE_ISOC95 : u32 = 1 ; pub const __USE_POSIX_IMPLICITLY : u32 = 1 ; pub const _POSIX_SOURCE : u32 = 1 ; pub const _POSIX_C_SOURCE : u32 = 200809 ; pub const __USE_POSIX : u32 = 1 ; pub const __USE_POSIX2 : u32 = 1 ; pub const __USE_POSIX199309 : u32 = 1 ; pub const __USE_POSIX199506 : u32 = 1 ; pub const __USE_XOPEN2K : u32 = 1 ; pub const __USE_XOPEN2K8 : u32 = 1 ; pub const _ATFILE_SOURCE : u32 = 1 ; pub const __USE_MISC : u32 = 1 ; pub const __USE_ATFILE : u32 = 1 ; pub const __USE_FORTIFY_LEVEL : u32 = 0 ; pub const __GLIBC_USE_DEPRECATED_GETS : u32 = 0 ; pub const _STDC_PREDEF_H : u32 = 1 ; pub const __STDC_IEC_559__ : u32 = 1 ; pub const __STDC_IEC_559_COMPLEX__ : u32 = 1 ; pub const __STDC_ISO_10646__ : u32 = 201706 ; pub const __GNU_LIBRARY__ : u32 = 6 ; pub const __GLIBC__ : u32 = 2 ; pub const __GLIBC_MINOR__ : u32 = 28 ; pub const _SYS_CDEFS_H : u32 = 1 ; pub const __glibc_c99_flexarr_available : u32 = 1 ; pub const __WORDSIZE : u32 = 64 ; pub const __WORDSIZE_TIME64_COMPAT32 : u32 = 1 ; pub const __SYSCALL_WORDSIZE : u32 = 64 ; pub const __HAVE_GENERIC_SELECTION : u32 = 1 ; pub const __GLIBC_USE_LIB_EXT2 : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_BFP_EXT : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_FUNCS_EXT : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_TYPES_EXT : u32 = 0 ; pub const __GNUC_VA_LIST : u32 = 1 ; pub const _BITS_TYPES_H : u32 = 1 ; pub const _BITS_TYPESIZES_H : u32 = 1 ; pub const __OFF_T_MATCHES_OFF64_T : u32 = 1 ; pub const __INO_T_MATCHES_INO64_T : u32 = 1 ; pub const __RLIM_T_MATCHES_RLIM64_T : u32 = 1 ; pub const __FD_SETSIZE : u32 = 1024 ; pub const _____fpos_t_defined : u32 = 1 ; pub const ____mbstate_t_defined : u32 = 1 ; pub const _____fpos64_t_defined : u32 = 1 ; pub const ____FILE_defined : u32 = 1 ; pub const __FILE_defined : u32 = 1 ; pub const __struct_FILE_defined : u32 = 1 ; pub const _IO_EOF_SEEN : u32 = 16 ; pub const _IO_ERR_SEEN : u32 = 32 ; pub const _IO_USER_LOCK : u32 = 32768 ; pub const _IOFBF : u32 = 0 ; pub const _IOLBF : u32 = 1 ; pub const _IONBF : u32 = 2 ; pub const BUFSIZ : u32 = 8192 ; pub const EOF : i32 = -1 ; pub const SEEK_SET : u32 = 0 ; pub const SEEK_CUR : u32 = 1 ; pub const SEEK_END : u32 = 2 ; pub const P_tmpdir : & 'static [ u8 ; 5usize ] = b"/tmp\0" ; pub const _BITS_STDIO_LIM_H : u32 = 1 ; pub const L_tmpnam : u32 = 20 ; pub const TMP_MAX : u32 = 238328 ; pub const FILENAME_MAX : u32 = 4096 ; pub const L_ctermid : u32 = 9 ; pub const FOPEN_MAX : u32 = 16 ; pub const JNI_FALSE : u32 = 0 ; pub const JNI_TRUE : u32 = 1 ; pub const JNI_OK : u32 = 0 ; pub const JNI_ERR : i32 = -1 ; pub const JNI_EDETACHED : i32 = -2 ; pub const JNI_EVERSION : i32 = -3 ; pub const JNI_ENOMEM : i32 = -4 ; pub const JNI_EEXIST : i32 = -5 ; pub const JNI_EINVAL : i32 = -6 ; pub const JNI_COMMIT : u32 = 1 ; pub const JNI_ABORT : u32 = 2 ; pub const JNI_VERSION_1_1 : u32 = 65537 ; pub const JNI_VERSION_1_2 : u32 = 65538 ; pub const JNI_VERSION_1_4 : u32 = 65540 ; pub const JNI_VERSION_1_6 : u32 = 65542 ; pub const JNI_VERSION_1_8 : u32 = 65544 ; pub type va_list = __builtin_va_list ; pub type __gnuc_va_list = __builtin_va_list ; pub type __u_char = :: std :: os :: raw :: c_uchar ; pub type __u_short = :: std :: os :: raw :: c_ushort ; pub type __u_int = :: std :: os :: raw :: c_uint ; pub type __u_long = :: std :: os :: raw :: c_ulong ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_long ; pub type __uint64_t = :: std :: os :: raw :: c_ulong ; pub type __int_least8_t = __int8_t ; pub type __uint_least8_t = __uint8_t ; pub type __int_least16_t = __int16_t ; pub type __uint_least16_t = __uint16_t ; pub type __int_least32_t = __int32_t ; pub type __uint_least32_t = __uint32_t ; pub type __int_least64_t = __int64_t ; pub type __uint_least64_t = __uint64_t ; pub type __quad_t = :: std :: os :: raw :: c_long ; pub type __u_quad_t = :: std :: os :: raw :: c_ulong ; pub type __intmax_t = :: std :: os :: raw :: c_long ; pub type __uintmax_t = :: std :: os :: raw :: c_ulong ; pub type __dev_t = :: std :: os :: raw :: c_ulong ; pub type __uid_t = :: std :: os :: raw :: c_uint ; pub type __gid_t = :: std :: os :: raw :: c_uint ; pub type __ino_t = :: std :: os :: raw :: c_ulong ; pub type __ino64_t = :: std :: os :: raw :: c_ulong ; pub type __mode_t = :: std :: os :: raw :: c_uint ; pub type __nlink_t = :: std :: os :: raw :: c_ulong ; pub type __off_t = :: std :: os :: raw :: c_long ; pub type __off64_t = :: std :: os :: raw :: c_long ; pub type __pid_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __fsid_t { pub __val : [ :: std :: os :: raw :: c_int ; 2usize ] , } # [ test ] fn bindgen_test_layout___fsid_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __fsid_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __fsid_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __fsid_t > ( ) ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __fsid_t ) , "::" , stringify ! ( __val ) ) ) ; } pub type __clock_t = :: std :: os :: raw :: c_long ; pub type __rlim_t = :: std :: os :: raw :: c_ulong ; pub type __rlim64_t = :: std :: os :: raw :: c_ulong ; pub type __id_t = :: std :: os :: raw :: c_uint ; pub type __time_t = :: std :: os :: raw :: c_long ; pub type __useconds_t = :: std :: os :: raw :: c_uint ; pub type __suseconds_t = :: std :: os :: raw :: c_long ; pub type __daddr_t = :: std :: os :: raw :: c_int ; pub type __key_t = :: std :: os :: raw :: c_int ; pub type __clockid_t = :: std :: os :: raw :: c_int ; pub type __timer_t = * mut :: std :: os :: raw :: c_void ; pub type __blksize_t = :: std :: os :: raw :: c_long ; pub type __blkcnt_t = :: std :: os :: raw :: c_long ; pub type __blkcnt64_t = :: std :: os :: raw :: c_long ; pub type __fsblkcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsblkcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsword_t = :: std :: os :: raw :: c_long ; pub type __ssize_t = :: std :: os :: raw :: c_long ; pub type __syscall_slong_t = :: std :: os :: raw :: c_long ; pub type __syscall_ulong_t = :: std :: os :: raw :: c_ulong ; pub type __loff_t = __off64_t ; pub type __caddr_t = * mut :: std :: os :: raw :: c_char ; pub type __intptr_t = :: std :: os :: raw :: c_long ; pub type __socklen_t = :: std :: os :: raw :: c_uint ; pub type __sig_atomic_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __mbstate_t { pub __count : :: std :: os :: raw :: c_int , pub __value : __mbstate_t__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __mbstate_t__bindgen_ty_1 { pub __wch : :: std :: os :: raw :: c_uint , pub __wchb : [ :: std :: os :: raw :: c_char ; 4usize ] , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout___mbstate_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t__bindgen_ty_1 > ( ) ) ) . __wch as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wch ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t__bindgen_ty_1 > ( ) ) ) . __wchb as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wchb ) ) ) ; } # [ test ] fn bindgen_test_layout___mbstate_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t > ( ) ) ) . __count as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t > ( ) ) ) . __value as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _G_fpos_t { pub __pos : __off_t , pub __state : __mbstate_t , } # [ test ] fn bindgen_test_layout__G_fpos_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _G_fpos_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _G_fpos_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _G_fpos_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _G_fpos_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _G_fpos_t > ( ) ) ) . __pos as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _G_fpos_t ) , "::" , stringify ! ( __pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _G_fpos_t > ( ) ) ) . __state as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _G_fpos_t ) , "::" , stringify ! ( __state ) ) ) ; } pub type __fpos_t = _G_fpos_t ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _G_fpos64_t { pub __pos : __off64_t , pub __state : __mbstate_t , } # [ test ] fn bindgen_test_layout__G_fpos64_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _G_fpos64_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _G_fpos64_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _G_fpos64_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _G_fpos64_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _G_fpos64_t > ( ) ) ) . __pos as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _G_fpos64_t ) , "::" , stringify ! ( __pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _G_fpos64_t > ( ) ) ) . __state as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _G_fpos64_t ) , "::" , stringify ! ( __state ) ) ) ; } pub type __fpos64_t = _G_fpos64_t ; pub type __FILE = _IO_FILE ; pub type FILE = _IO_FILE ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_marker { _unused : [ u8 ; 0 ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_codecvt { _unused : [ u8 ; 0 ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_wide_data { _unused : [ u8 ; 0 ] , } pub type _IO_lock_t = :: std :: os :: raw :: c_void ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_FILE { pub _flags : :: std :: os :: raw :: c_int , pub _IO_read_ptr : * mut :: std :: os :: raw :: c_char , pub _IO_read_end : * mut :: std :: os :: raw :: c_char , pub _IO_read_base : * mut :: std :: os :: raw :: c_char , pub _IO_write_base : * mut :: std :: os :: raw :: c_char , pub _IO_write_ptr : * mut :: std :: os :: raw :: c_char , pub _IO_write_end : * mut :: std :: os :: raw :: c_char , pub _IO_buf_base : * mut :: std :: os :: raw :: c_char , pub _IO_buf_end : * mut :: std :: os :: raw :: c_char , pub _IO_save_base : * mut :: std :: os :: raw :: c_char , pub _IO_backup_base : * mut :: std :: os :: raw :: c_char , pub _IO_save_end : * mut :: std :: os :: raw :: c_char , pub _markers : * mut _IO_marker , pub _chain : * mut _IO_FILE , pub _fileno : :: std :: os :: raw :: c_int , pub _flags2 : :: std :: os :: raw :: c_int , pub _old_offset : __off_t , pub _cur_column : :: std :: os :: raw :: c_ushort , pub _vtable_offset : :: std :: os :: raw :: c_schar , pub _shortbuf : [ :: std :: os :: raw :: c_char ; 1usize ] , pub _lock : * mut _IO_lock_t , pub _offset : __off64_t , pub _codecvt : * mut _IO_codecvt , pub _wide_data : * mut _IO_wide_data , pub _freeres_list : * mut _IO_FILE , pub _freeres_buf : * mut :: std :: os :: raw :: c_void , pub __pad5 : usize , pub _mode : :: std :: os :: raw :: c_int , pub _unused2 : [ :: std :: os :: raw :: c_char ; 20usize ] , } # [ test ] fn bindgen_test_layout__IO_FILE ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _IO_FILE > ( ) , 216usize , concat ! ( "Size of: " , stringify ! ( _IO_FILE ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _IO_FILE > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _IO_FILE ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _flags as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_read_ptr as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_ptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_read_end as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_read_base as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_write_base as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_write_ptr as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_ptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_write_end as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_buf_base as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_buf_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_buf_end as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_buf_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_save_base as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_save_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_backup_base as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_backup_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_save_end as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_save_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _markers as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _markers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _chain as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _chain ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _fileno as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _fileno ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _flags2 as * const _ as usize } , 116usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _flags2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _old_offset as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _old_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _cur_column as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _cur_column ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _vtable_offset as * const _ as usize } , 130usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _vtable_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _shortbuf as * const _ as usize } , 131usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _shortbuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _lock as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _offset as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _codecvt as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _codecvt ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _wide_data as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _wide_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _freeres_list as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _freeres_list ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _freeres_buf as * const _ as usize } , 176usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _freeres_buf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . __pad5 as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _mode as * const _ as usize } , 192usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _unused2 as * const _ as usize } , 196usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _unused2 ) ) ) ; } pub type off_t = __off_t ; pub type fpos_t = __fpos_t ; extern "C" { pub static mut stdin : * mut FILE ; } extern "C" { pub static mut stdout : * mut FILE ; } extern "C" { pub static mut stderr : * mut FILE ; } extern "C" { pub fn remove ( __filename : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rename ( __old : * const :: std :: os :: raw :: c_char , __new : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn renameat ( __oldfd : :: std :: os :: raw :: c_int , __old : * const :: std :: os :: raw :: c_char , __newfd : :: std :: os :: raw :: c_int , __new : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn tmpfile ( ) -> * mut FILE ; } extern "C" { pub fn tmpnam ( __s : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn tmpnam_r ( __s : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn tempnam ( __dir : * const :: std :: os :: raw :: c_char , __pfx : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fclose ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fflush ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fflush_unlocked ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fopen ( __filename : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn freopen ( __filename : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char , __stream : * mut FILE ) -> * mut FILE ; } extern "C" { pub fn fdopen ( __fd : :: std :: os :: raw :: c_int , __modes : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn fmemopen ( __s : * mut :: std :: os :: raw :: c_void , __len : usize , __modes : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn open_memstream ( __bufloc : * mut * mut :: std :: os :: raw :: c_char , __sizeloc : * mut usize ) -> * mut FILE ; } extern "C" { pub fn setbuf ( __stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn setvbuf ( __stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , __modes : :: std :: os :: raw :: c_int , __n : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setbuffer ( __stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , __size : usize ) ; } extern "C" { pub fn setlinebuf ( __stream : * mut FILE ) ; } extern "C" { pub fn fprintf ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn printf ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sprintf ( __s : * mut :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vfprintf ( __s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vprintf ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsprintf ( __s : * mut :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn snprintf ( __s : * mut :: std :: os :: raw :: c_char , __maxlen : :: std :: os :: raw :: c_ulong , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsnprintf ( __s : * mut :: std :: os :: raw :: c_char , __maxlen : :: std :: os :: raw :: c_ulong , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vdprintf ( __fd : :: std :: os :: raw :: c_int , __fmt : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn dprintf ( __fd : :: std :: os :: raw :: c_int , __fmt : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fscanf ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn scanf ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sscanf ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__isoc99_fscanf" ] pub fn fscanf1 ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__isoc99_scanf" ] pub fn scanf1 ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__isoc99_sscanf" ] pub fn sscanf1 ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vfscanf ( __s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vscanf ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsscanf ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__isoc99_vfscanf" ] pub fn vfscanf1 ( __s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__isoc99_vscanf" ] pub fn vscanf1 ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__isoc99_vsscanf" ] pub fn vsscanf1 ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetc ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getc ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getchar ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getc_unlocked ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getchar_unlocked ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetc_unlocked ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputc ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putc ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putchar ( __c : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputc_unlocked ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putc_unlocked ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putchar_unlocked ( __c : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getw ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putw ( __w : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgets ( __s : * mut :: std :: os :: raw :: c_char , __n : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn __getdelim ( __lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __delimiter : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> __ssize_t ; } extern "C" { pub fn getdelim ( __lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __delimiter : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> __ssize_t ; } extern "C" { pub fn getline ( __lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __stream : * mut FILE ) -> __ssize_t ; } extern "C" { pub fn fputs ( __s : * const :: std :: os :: raw :: c_char , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn puts ( __s : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ungetc ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fread ( __ptr : * mut :: std :: os :: raw :: c_void , __size : :: std :: os :: raw :: c_ulong , __n : :: std :: os :: raw :: c_ulong , __stream : * mut FILE ) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn fwrite ( __ptr : * const :: std :: os :: raw :: c_void , __size : :: std :: os :: raw :: c_ulong , __n : :: std :: os :: raw :: c_ulong , __s : * mut FILE ) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn fread_unlocked ( __ptr : * mut :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE ) -> usize ; } extern "C" { pub fn fwrite_unlocked ( __ptr : * const :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE ) -> usize ; } extern "C" { pub fn fseek ( __stream : * mut FILE , __off : :: std :: os :: raw :: c_long , __whence : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ftell ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn rewind ( __stream : * mut FILE ) ; } extern "C" { pub fn fseeko ( __stream : * mut FILE , __off : __off_t , __whence : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ftello ( __stream : * mut FILE ) -> __off_t ; } extern "C" { pub fn fgetpos ( __stream : * mut FILE , __pos : * mut fpos_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fsetpos ( __stream : * mut FILE , __pos : * const fpos_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn clearerr ( __stream : * mut FILE ) ; } extern "C" { pub fn feof ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ferror ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn clearerr_unlocked ( __stream : * mut FILE ) ; } extern "C" { pub fn feof_unlocked ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ferror_unlocked ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn perror ( __s : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub static mut sys_nerr : :: std :: os :: raw :: c_int ; } extern "C" { pub static mut sys_errlist : [ * const :: std :: os :: raw :: c_char ; 0usize ] ; } extern "C" { pub fn fileno ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fileno_unlocked ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn popen ( __command : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn pclose ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ctermid ( __s : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn flockfile ( __stream : * mut FILE ) ; } extern "C" { pub fn ftrylockfile ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn funlockfile ( __stream : * mut FILE ) ; } extern "C" { pub fn __uflow ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __overflow ( arg1 : * mut FILE , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } pub type jint = :: std :: os :: raw :: c_int ; pub type jlong = :: std :: os :: raw :: c_long ; pub type jbyte = :: std :: os :: raw :: c_schar ; pub type jboolean = :: std :: os :: raw :: c_uchar ; pub type jchar = :: std :: os :: raw :: c_ushort ; pub type jshort = :: std :: os :: raw :: c_short ; pub type jfloat = f32 ; pub type jdouble = f64 ; pub type jsize = jint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jobject { _unused : [ u8 ; 0 ] , } pub type jobject = * mut _jobject ; pub type jclass = jobject ; pub type jthrowable = jobject ; pub type jstring = jobject ; pub type jarray = jobject ; pub type jbooleanArray = jarray ; pub type jbyteArray = jarray ; pub type jcharArray = jarray ; pub type jshortArray = jarray ; pub type jintArray = jarray ; pub type jlongArray = jarray ; pub type jfloatArray = jarray ; pub type jdoubleArray = jarray ; pub type jobjectArray = jarray ; pub type jweak = jobject ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union jvalue { pub z : jboolean , pub b : jbyte , pub c : jchar , pub s : jshort , pub i : jint , pub j : jlong , pub f : jfloat , pub d : jdouble , pub l : jobject , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_jvalue ( ) { assert_eq ! ( :: std :: mem :: size_of :: < jvalue > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( jvalue ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < jvalue > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( jvalue ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvalue > ( ) ) ) . z as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( jvalue ) , "::" , stringify ! ( z ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvalue > ( ) ) ) . b as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( jvalue ) , "::" , stringify ! ( b ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvalue > ( ) ) ) . c as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( jvalue ) , "::" , stringify ! ( c ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvalue > ( ) ) ) . s as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( jvalue ) , "::" , stringify ! ( s ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvalue > ( ) ) ) . i as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( jvalue ) , "::" , stringify ! ( i ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvalue > ( ) ) ) . j as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( jvalue ) , "::" , stringify ! ( j ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvalue > ( ) ) ) . f as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( jvalue ) , "::" , stringify ! ( f ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvalue > ( ) ) ) . d as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( jvalue ) , "::" , stringify ! ( d ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvalue > ( ) ) ) . l as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( jvalue ) , "::" , stringify ! ( l ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jfieldID { _unused : [ u8 ; 0 ] , } pub type jfieldID = * mut _jfieldID ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jmethodID { _unused : [ u8 ; 0 ] , } pub type jmethodID = * mut _jmethodID ; pub const _jobjectType_JNIInvalidRefType : _jobjectType = 0 ; pub const _jobjectType_JNILocalRefType : _jobjectType = 1 ; pub const _jobjectType_JNIGlobalRefType : _jobjectType = 2 ; pub const _jobjectType_JNIWeakGlobalRefType : _jobjectType = 3 ; pub type _jobjectType = u32 ; pub use self :: _jobjectType as jobjectRefType ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct JNINativeMethod { pub name : * mut :: std :: os :: raw :: c_char , pub signature : * mut :: std :: os :: raw :: c_char , pub fnPtr : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_JNINativeMethod ( ) { assert_eq ! ( :: std :: mem :: size_of :: < JNINativeMethod > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( JNINativeMethod ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < JNINativeMethod > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( JNINativeMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeMethod > ( ) ) ) . name as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeMethod ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeMethod > ( ) ) ) . signature as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeMethod ) , "::" , stringify ! ( signature ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeMethod > ( ) ) ) . fnPtr as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeMethod ) , "::" , stringify ! ( fnPtr ) ) ) ; } pub type JNIEnv = * const JNINativeInterface_ ; pub type JavaVM = * const JNIInvokeInterface_ ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct JNINativeInterface_ { pub reserved0 : * mut :: std :: os :: raw :: c_void , pub reserved1 : * mut :: std :: os :: raw :: c_void , pub reserved2 : * mut :: std :: os :: raw :: c_void , pub reserved3 : * mut :: std :: os :: raw :: c_void , pub GetVersion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv ) -> jint > , pub DefineClass : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , name : * const :: std :: os :: raw :: c_char , loader : jobject , buf : * const jbyte , len : jsize ) -> jclass > , pub FindClass : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , name : * const :: std :: os :: raw :: c_char ) -> jclass > , pub FromReflectedMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , method : jobject ) -> jmethodID > , pub FromReflectedField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , field : jobject ) -> jfieldID > , pub ToReflectedMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , cls : jclass , methodID : jmethodID , isStatic : jboolean ) -> jobject > , pub GetSuperclass : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , sub : jclass ) -> jclass > , pub IsAssignableFrom : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , sub : jclass , sup : jclass ) -> jboolean > , pub ToReflectedField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , cls : jclass , fieldID : jfieldID , isStatic : jboolean ) -> jobject > , pub Throw : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jthrowable ) -> jint > , pub ThrowNew : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , msg : * const :: std :: os :: raw :: c_char ) -> jint > , pub ExceptionOccurred : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv ) -> jthrowable > , pub ExceptionDescribe : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv ) > , pub ExceptionClear : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv ) > , pub FatalError : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , msg : * const :: std :: os :: raw :: c_char ) > , pub PushLocalFrame : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , capacity : jint ) -> jint > , pub PopLocalFrame : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , result : jobject ) -> jobject > , pub NewGlobalRef : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , lobj : jobject ) -> jobject > , pub DeleteGlobalRef : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , gref : jobject ) > , pub DeleteLocalRef : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject ) > , pub IsSameObject : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj1 : jobject , obj2 : jobject ) -> jboolean > , pub NewLocalRef : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , ref_ : jobject ) -> jobject > , pub EnsureLocalCapacity : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , capacity : jint ) -> jint > , pub AllocObject : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass ) -> jobject > , pub NewObject : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , ... ) -> jobject > , pub NewObjectV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jobject > , pub NewObjectA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jobject > , pub GetObjectClass : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject ) -> jclass > , pub IsInstanceOf : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass ) -> jboolean > , pub GetMethodID : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , name : * const :: std :: os :: raw :: c_char , sig : * const :: std :: os :: raw :: c_char ) -> jmethodID > , pub CallObjectMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , ... ) -> jobject > , pub CallObjectMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * mut __va_list_tag ) -> jobject > , pub CallObjectMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * const jvalue ) -> jobject > , pub CallBooleanMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , ... ) -> jboolean > , pub CallBooleanMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * mut __va_list_tag ) -> jboolean > , pub CallBooleanMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * const jvalue ) -> jboolean > , pub CallByteMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , ... ) -> jbyte > , pub CallByteMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * mut __va_list_tag ) -> jbyte > , pub CallByteMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * const jvalue ) -> jbyte > , pub CallCharMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , ... ) -> jchar > , pub CallCharMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * mut __va_list_tag ) -> jchar > , pub CallCharMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * const jvalue ) -> jchar > , pub CallShortMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , ... ) -> jshort > , pub CallShortMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * mut __va_list_tag ) -> jshort > , pub CallShortMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * const jvalue ) -> jshort > , pub CallIntMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , ... ) -> jint > , pub CallIntMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * mut __va_list_tag ) -> jint > , pub CallIntMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * const jvalue ) -> jint > , pub CallLongMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , ... ) -> jlong > , pub CallLongMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * mut __va_list_tag ) -> jlong > , pub CallLongMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * const jvalue ) -> jlong > , pub CallFloatMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , ... ) -> jfloat > , pub CallFloatMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * mut __va_list_tag ) -> jfloat > , pub CallFloatMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * const jvalue ) -> jfloat > , pub CallDoubleMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , ... ) -> jdouble > , pub CallDoubleMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * mut __va_list_tag ) -> jdouble > , pub CallDoubleMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * const jvalue ) -> jdouble > , pub CallVoidMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , ... ) > , pub CallVoidMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * mut __va_list_tag ) > , pub CallVoidMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , methodID : jmethodID , args : * const jvalue ) > , pub CallNonvirtualObjectMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , ... ) -> jobject > , pub CallNonvirtualObjectMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jobject > , pub CallNonvirtualObjectMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jobject > , pub CallNonvirtualBooleanMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , ... ) -> jboolean > , pub CallNonvirtualBooleanMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jboolean > , pub CallNonvirtualBooleanMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jboolean > , pub CallNonvirtualByteMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , ... ) -> jbyte > , pub CallNonvirtualByteMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jbyte > , pub CallNonvirtualByteMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jbyte > , pub CallNonvirtualCharMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , ... ) -> jchar > , pub CallNonvirtualCharMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jchar > , pub CallNonvirtualCharMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jchar > , pub CallNonvirtualShortMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , ... ) -> jshort > , pub CallNonvirtualShortMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jshort > , pub CallNonvirtualShortMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jshort > , pub CallNonvirtualIntMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , ... ) -> jint > , pub CallNonvirtualIntMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jint > , pub CallNonvirtualIntMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jint > , pub CallNonvirtualLongMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , ... ) -> jlong > , pub CallNonvirtualLongMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jlong > , pub CallNonvirtualLongMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jlong > , pub CallNonvirtualFloatMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , ... ) -> jfloat > , pub CallNonvirtualFloatMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jfloat > , pub CallNonvirtualFloatMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jfloat > , pub CallNonvirtualDoubleMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , ... ) -> jdouble > , pub CallNonvirtualDoubleMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jdouble > , pub CallNonvirtualDoubleMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jdouble > , pub CallNonvirtualVoidMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , ... ) > , pub CallNonvirtualVoidMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) > , pub CallNonvirtualVoidMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , clazz : jclass , methodID : jmethodID , args : * const jvalue ) > , pub GetFieldID : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , name : * const :: std :: os :: raw :: c_char , sig : * const :: std :: os :: raw :: c_char ) -> jfieldID > , pub GetObjectField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID ) -> jobject > , pub GetBooleanField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID ) -> jboolean > , pub GetByteField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID ) -> jbyte > , pub GetCharField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID ) -> jchar > , pub GetShortField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID ) -> jshort > , pub GetIntField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID ) -> jint > , pub GetLongField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID ) -> jlong > , pub GetFloatField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID ) -> jfloat > , pub GetDoubleField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID ) -> jdouble > , pub SetObjectField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID , val : jobject ) > , pub SetBooleanField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID , val : jboolean ) > , pub SetByteField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID , val : jbyte ) > , pub SetCharField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID , val : jchar ) > , pub SetShortField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID , val : jshort ) > , pub SetIntField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID , val : jint ) > , pub SetLongField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID , val : jlong ) > , pub SetFloatField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID , val : jfloat ) > , pub SetDoubleField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject , fieldID : jfieldID , val : jdouble ) > , pub GetStaticMethodID : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , name : * const :: std :: os :: raw :: c_char , sig : * const :: std :: os :: raw :: c_char ) -> jmethodID > , pub CallStaticObjectMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , ... ) -> jobject > , pub CallStaticObjectMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jobject > , pub CallStaticObjectMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jobject > , pub CallStaticBooleanMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , ... ) -> jboolean > , pub CallStaticBooleanMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jboolean > , pub CallStaticBooleanMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jboolean > , pub CallStaticByteMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , ... ) -> jbyte > , pub CallStaticByteMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jbyte > , pub CallStaticByteMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jbyte > , pub CallStaticCharMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , ... ) -> jchar > , pub CallStaticCharMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jchar > , pub CallStaticCharMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jchar > , pub CallStaticShortMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , ... ) -> jshort > , pub CallStaticShortMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jshort > , pub CallStaticShortMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jshort > , pub CallStaticIntMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , ... ) -> jint > , pub CallStaticIntMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jint > , pub CallStaticIntMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jint > , pub CallStaticLongMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , ... ) -> jlong > , pub CallStaticLongMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jlong > , pub CallStaticLongMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jlong > , pub CallStaticFloatMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , ... ) -> jfloat > , pub CallStaticFloatMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jfloat > , pub CallStaticFloatMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jfloat > , pub CallStaticDoubleMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , ... ) -> jdouble > , pub CallStaticDoubleMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * mut __va_list_tag ) -> jdouble > , pub CallStaticDoubleMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methodID : jmethodID , args : * const jvalue ) -> jdouble > , pub CallStaticVoidMethod : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , cls : jclass , methodID : jmethodID , ... ) > , pub CallStaticVoidMethodV : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , cls : jclass , methodID : jmethodID , args : * mut __va_list_tag ) > , pub CallStaticVoidMethodA : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , cls : jclass , methodID : jmethodID , args : * const jvalue ) > , pub GetStaticFieldID : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , name : * const :: std :: os :: raw :: c_char , sig : * const :: std :: os :: raw :: c_char ) -> jfieldID > , pub GetStaticObjectField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID ) -> jobject > , pub GetStaticBooleanField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID ) -> jboolean > , pub GetStaticByteField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID ) -> jbyte > , pub GetStaticCharField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID ) -> jchar > , pub GetStaticShortField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID ) -> jshort > , pub GetStaticIntField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID ) -> jint > , pub GetStaticLongField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID ) -> jlong > , pub GetStaticFloatField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID ) -> jfloat > , pub GetStaticDoubleField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID ) -> jdouble > , pub SetStaticObjectField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID , value : jobject ) > , pub SetStaticBooleanField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID , value : jboolean ) > , pub SetStaticByteField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID , value : jbyte ) > , pub SetStaticCharField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID , value : jchar ) > , pub SetStaticShortField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID , value : jshort ) > , pub SetStaticIntField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID , value : jint ) > , pub SetStaticLongField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID , value : jlong ) > , pub SetStaticFloatField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID , value : jfloat ) > , pub SetStaticDoubleField : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , fieldID : jfieldID , value : jdouble ) > , pub NewString : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , unicode : * const jchar , len : jsize ) -> jstring > , pub GetStringLength : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , str : jstring ) -> jsize > , pub GetStringChars : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , str : jstring , isCopy : * mut jboolean ) -> * const jchar > , pub ReleaseStringChars : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , str : jstring , chars : * const jchar ) > , pub NewStringUTF : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , utf : * const :: std :: os :: raw :: c_char ) -> jstring > , pub GetStringUTFLength : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , str : jstring ) -> jsize > , pub GetStringUTFChars : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , str : jstring , isCopy : * mut jboolean ) -> * const :: std :: os :: raw :: c_char > , pub ReleaseStringUTFChars : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , str : jstring , chars : * const :: std :: os :: raw :: c_char ) > , pub GetArrayLength : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jarray ) -> jsize > , pub NewObjectArray : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , len : jsize , clazz : jclass , init : jobject ) -> jobjectArray > , pub GetObjectArrayElement : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jobjectArray , index : jsize ) -> jobject > , pub SetObjectArrayElement : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jobjectArray , index : jsize , val : jobject ) > , pub NewBooleanArray : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , len : jsize ) -> jbooleanArray > , pub NewByteArray : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , len : jsize ) -> jbyteArray > , pub NewCharArray : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , len : jsize ) -> jcharArray > , pub NewShortArray : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , len : jsize ) -> jshortArray > , pub NewIntArray : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , len : jsize ) -> jintArray > , pub NewLongArray : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , len : jsize ) -> jlongArray > , pub NewFloatArray : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , len : jsize ) -> jfloatArray > , pub NewDoubleArray : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , len : jsize ) -> jdoubleArray > , pub GetBooleanArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jbooleanArray , isCopy : * mut jboolean ) -> * mut jboolean > , pub GetByteArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jbyteArray , isCopy : * mut jboolean ) -> * mut jbyte > , pub GetCharArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jcharArray , isCopy : * mut jboolean ) -> * mut jchar > , pub GetShortArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jshortArray , isCopy : * mut jboolean ) -> * mut jshort > , pub GetIntArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jintArray , isCopy : * mut jboolean ) -> * mut jint > , pub GetLongArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jlongArray , isCopy : * mut jboolean ) -> * mut jlong > , pub GetFloatArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jfloatArray , isCopy : * mut jboolean ) -> * mut jfloat > , pub GetDoubleArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jdoubleArray , isCopy : * mut jboolean ) -> * mut jdouble > , pub ReleaseBooleanArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jbooleanArray , elems : * mut jboolean , mode : jint ) > , pub ReleaseByteArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jbyteArray , elems : * mut jbyte , mode : jint ) > , pub ReleaseCharArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jcharArray , elems : * mut jchar , mode : jint ) > , pub ReleaseShortArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jshortArray , elems : * mut jshort , mode : jint ) > , pub ReleaseIntArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jintArray , elems : * mut jint , mode : jint ) > , pub ReleaseLongArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jlongArray , elems : * mut jlong , mode : jint ) > , pub ReleaseFloatArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jfloatArray , elems : * mut jfloat , mode : jint ) > , pub ReleaseDoubleArrayElements : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jdoubleArray , elems : * mut jdouble , mode : jint ) > , pub GetBooleanArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jbooleanArray , start : jsize , l : jsize , buf : * mut jboolean ) > , pub GetByteArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jbyteArray , start : jsize , len : jsize , buf : * mut jbyte ) > , pub GetCharArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jcharArray , start : jsize , len : jsize , buf : * mut jchar ) > , pub GetShortArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jshortArray , start : jsize , len : jsize , buf : * mut jshort ) > , pub GetIntArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jintArray , start : jsize , len : jsize , buf : * mut jint ) > , pub GetLongArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jlongArray , start : jsize , len : jsize , buf : * mut jlong ) > , pub GetFloatArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jfloatArray , start : jsize , len : jsize , buf : * mut jfloat ) > , pub GetDoubleArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jdoubleArray , start : jsize , len : jsize , buf : * mut jdouble ) > , pub SetBooleanArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jbooleanArray , start : jsize , l : jsize , buf : * const jboolean ) > , pub SetByteArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jbyteArray , start : jsize , len : jsize , buf : * const jbyte ) > , pub SetCharArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jcharArray , start : jsize , len : jsize , buf : * const jchar ) > , pub SetShortArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jshortArray , start : jsize , len : jsize , buf : * const jshort ) > , pub SetIntArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jintArray , start : jsize , len : jsize , buf : * const jint ) > , pub SetLongArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jlongArray , start : jsize , len : jsize , buf : * const jlong ) > , pub SetFloatArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jfloatArray , start : jsize , len : jsize , buf : * const jfloat ) > , pub SetDoubleArrayRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jdoubleArray , start : jsize , len : jsize , buf : * const jdouble ) > , pub RegisterNatives : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass , methods : * const JNINativeMethod , nMethods : jint ) -> jint > , pub UnregisterNatives : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , clazz : jclass ) -> jint > , pub MonitorEnter : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject ) -> jint > , pub MonitorExit : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject ) -> jint > , pub GetJavaVM : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , vm : * mut * mut JavaVM ) -> jint > , pub GetStringRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , str : jstring , start : jsize , len : jsize , buf : * mut jchar ) > , pub GetStringUTFRegion : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , str : jstring , start : jsize , len : jsize , buf : * mut :: std :: os :: raw :: c_char ) > , pub GetPrimitiveArrayCritical : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jarray , isCopy : * mut jboolean ) -> * mut :: std :: os :: raw :: c_void > , pub ReleasePrimitiveArrayCritical : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , array : jarray , carray : * mut :: std :: os :: raw :: c_void , mode : jint ) > , pub GetStringCritical : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , string : jstring , isCopy : * mut jboolean ) -> * const jchar > , pub ReleaseStringCritical : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , string : jstring , cstring : * const jchar ) > , pub NewWeakGlobalRef : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject ) -> jweak > , pub DeleteWeakGlobalRef : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , ref_ : jweak ) > , pub ExceptionCheck : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv ) -> jboolean > , pub NewDirectByteBuffer : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , address : * mut :: std :: os :: raw :: c_void , capacity : jlong ) -> jobject > , pub GetDirectBufferAddress : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , buf : jobject ) -> * mut :: std :: os :: raw :: c_void > , pub GetDirectBufferCapacity : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , buf : jobject ) -> jlong > , pub GetObjectRefType : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut JNIEnv , obj : jobject ) -> jobjectRefType > , } # [ test ] fn bindgen_test_layout_JNINativeInterface_ ( ) { assert_eq ! ( :: std :: mem :: size_of :: < JNINativeInterface_ > ( ) , 1864usize , concat ! ( "Size of: " , stringify ! ( JNINativeInterface_ ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < JNINativeInterface_ > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( JNINativeInterface_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . reserved0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( reserved0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . reserved1 as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . reserved2 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( reserved2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . reserved3 as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( reserved3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetVersion as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetVersion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . DefineClass as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( DefineClass ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . FindClass as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( FindClass ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . FromReflectedMethod as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( FromReflectedMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . FromReflectedField as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( FromReflectedField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ToReflectedMethod as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ToReflectedMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetSuperclass as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetSuperclass ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . IsAssignableFrom as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( IsAssignableFrom ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ToReflectedField as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ToReflectedField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . Throw as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( Throw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ThrowNew as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ThrowNew ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ExceptionOccurred as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ExceptionOccurred ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ExceptionDescribe as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ExceptionDescribe ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ExceptionClear as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ExceptionClear ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . FatalError as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( FatalError ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . PushLocalFrame as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( PushLocalFrame ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . PopLocalFrame as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( PopLocalFrame ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewGlobalRef as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewGlobalRef ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . DeleteGlobalRef as * const _ as usize } , 176usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( DeleteGlobalRef ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . DeleteLocalRef as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( DeleteLocalRef ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . IsSameObject as * const _ as usize } , 192usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( IsSameObject ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewLocalRef as * const _ as usize } , 200usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewLocalRef ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . EnsureLocalCapacity as * const _ as usize } , 208usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( EnsureLocalCapacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . AllocObject as * const _ as usize } , 216usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( AllocObject ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewObject as * const _ as usize } , 224usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewObject ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewObjectV as * const _ as usize } , 232usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewObjectV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewObjectA as * const _ as usize } , 240usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewObjectA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetObjectClass as * const _ as usize } , 248usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetObjectClass ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . IsInstanceOf as * const _ as usize } , 256usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( IsInstanceOf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetMethodID as * const _ as usize } , 264usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetMethodID ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallObjectMethod as * const _ as usize } , 272usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallObjectMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallObjectMethodV as * const _ as usize } , 280usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallObjectMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallObjectMethodA as * const _ as usize } , 288usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallObjectMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallBooleanMethod as * const _ as usize } , 296usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallBooleanMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallBooleanMethodV as * const _ as usize } , 304usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallBooleanMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallBooleanMethodA as * const _ as usize } , 312usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallBooleanMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallByteMethod as * const _ as usize } , 320usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallByteMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallByteMethodV as * const _ as usize } , 328usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallByteMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallByteMethodA as * const _ as usize } , 336usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallByteMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallCharMethod as * const _ as usize } , 344usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallCharMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallCharMethodV as * const _ as usize } , 352usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallCharMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallCharMethodA as * const _ as usize } , 360usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallCharMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallShortMethod as * const _ as usize } , 368usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallShortMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallShortMethodV as * const _ as usize } , 376usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallShortMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallShortMethodA as * const _ as usize } , 384usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallShortMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallIntMethod as * const _ as usize } , 392usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallIntMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallIntMethodV as * const _ as usize } , 400usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallIntMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallIntMethodA as * const _ as usize } , 408usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallIntMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallLongMethod as * const _ as usize } , 416usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallLongMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallLongMethodV as * const _ as usize } , 424usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallLongMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallLongMethodA as * const _ as usize } , 432usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallLongMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallFloatMethod as * const _ as usize } , 440usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallFloatMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallFloatMethodV as * const _ as usize } , 448usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallFloatMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallFloatMethodA as * const _ as usize } , 456usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallFloatMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallDoubleMethod as * const _ as usize } , 464usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallDoubleMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallDoubleMethodV as * const _ as usize } , 472usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallDoubleMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallDoubleMethodA as * const _ as usize } , 480usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallDoubleMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallVoidMethod as * const _ as usize } , 488usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallVoidMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallVoidMethodV as * const _ as usize } , 496usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallVoidMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallVoidMethodA as * const _ as usize } , 504usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallVoidMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualObjectMethod as * const _ as usize } , 512usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualObjectMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualObjectMethodV as * const _ as usize } , 520usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualObjectMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualObjectMethodA as * const _ as usize } , 528usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualObjectMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualBooleanMethod as * const _ as usize } , 536usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualBooleanMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualBooleanMethodV as * const _ as usize } , 544usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualBooleanMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualBooleanMethodA as * const _ as usize } , 552usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualBooleanMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualByteMethod as * const _ as usize } , 560usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualByteMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualByteMethodV as * const _ as usize } , 568usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualByteMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualByteMethodA as * const _ as usize } , 576usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualByteMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualCharMethod as * const _ as usize } , 584usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualCharMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualCharMethodV as * const _ as usize } , 592usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualCharMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualCharMethodA as * const _ as usize } , 600usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualCharMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualShortMethod as * const _ as usize } , 608usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualShortMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualShortMethodV as * const _ as usize } , 616usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualShortMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualShortMethodA as * const _ as usize } , 624usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualShortMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualIntMethod as * const _ as usize } , 632usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualIntMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualIntMethodV as * const _ as usize } , 640usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualIntMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualIntMethodA as * const _ as usize } , 648usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualIntMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualLongMethod as * const _ as usize } , 656usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualLongMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualLongMethodV as * const _ as usize } , 664usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualLongMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualLongMethodA as * const _ as usize } , 672usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualLongMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualFloatMethod as * const _ as usize } , 680usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualFloatMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualFloatMethodV as * const _ as usize } , 688usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualFloatMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualFloatMethodA as * const _ as usize } , 696usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualFloatMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualDoubleMethod as * const _ as usize } , 704usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualDoubleMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualDoubleMethodV as * const _ as usize } , 712usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualDoubleMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualDoubleMethodA as * const _ as usize } , 720usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualDoubleMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualVoidMethod as * const _ as usize } , 728usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualVoidMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualVoidMethodV as * const _ as usize } , 736usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualVoidMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallNonvirtualVoidMethodA as * const _ as usize } , 744usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallNonvirtualVoidMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetFieldID as * const _ as usize } , 752usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetFieldID ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetObjectField as * const _ as usize } , 760usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetObjectField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetBooleanField as * const _ as usize } , 768usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetBooleanField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetByteField as * const _ as usize } , 776usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetByteField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetCharField as * const _ as usize } , 784usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetCharField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetShortField as * const _ as usize } , 792usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetShortField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetIntField as * const _ as usize } , 800usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetIntField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetLongField as * const _ as usize } , 808usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetLongField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetFloatField as * const _ as usize } , 816usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetFloatField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetDoubleField as * const _ as usize } , 824usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetDoubleField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetObjectField as * const _ as usize } , 832usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetObjectField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetBooleanField as * const _ as usize } , 840usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetBooleanField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetByteField as * const _ as usize } , 848usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetByteField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetCharField as * const _ as usize } , 856usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetCharField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetShortField as * const _ as usize } , 864usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetShortField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetIntField as * const _ as usize } , 872usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetIntField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetLongField as * const _ as usize } , 880usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetLongField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetFloatField as * const _ as usize } , 888usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetFloatField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetDoubleField as * const _ as usize } , 896usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetDoubleField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStaticMethodID as * const _ as usize } , 904usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStaticMethodID ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticObjectMethod as * const _ as usize } , 912usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticObjectMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticObjectMethodV as * const _ as usize } , 920usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticObjectMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticObjectMethodA as * const _ as usize } , 928usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticObjectMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticBooleanMethod as * const _ as usize } , 936usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticBooleanMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticBooleanMethodV as * const _ as usize } , 944usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticBooleanMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticBooleanMethodA as * const _ as usize } , 952usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticBooleanMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticByteMethod as * const _ as usize } , 960usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticByteMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticByteMethodV as * const _ as usize } , 968usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticByteMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticByteMethodA as * const _ as usize } , 976usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticByteMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticCharMethod as * const _ as usize } , 984usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticCharMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticCharMethodV as * const _ as usize } , 992usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticCharMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticCharMethodA as * const _ as usize } , 1000usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticCharMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticShortMethod as * const _ as usize } , 1008usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticShortMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticShortMethodV as * const _ as usize } , 1016usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticShortMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticShortMethodA as * const _ as usize } , 1024usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticShortMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticIntMethod as * const _ as usize } , 1032usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticIntMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticIntMethodV as * const _ as usize } , 1040usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticIntMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticIntMethodA as * const _ as usize } , 1048usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticIntMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticLongMethod as * const _ as usize } , 1056usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticLongMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticLongMethodV as * const _ as usize } , 1064usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticLongMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticLongMethodA as * const _ as usize } , 1072usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticLongMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticFloatMethod as * const _ as usize } , 1080usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticFloatMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticFloatMethodV as * const _ as usize } , 1088usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticFloatMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticFloatMethodA as * const _ as usize } , 1096usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticFloatMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticDoubleMethod as * const _ as usize } , 1104usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticDoubleMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticDoubleMethodV as * const _ as usize } , 1112usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticDoubleMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticDoubleMethodA as * const _ as usize } , 1120usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticDoubleMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticVoidMethod as * const _ as usize } , 1128usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticVoidMethod ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticVoidMethodV as * const _ as usize } , 1136usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticVoidMethodV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . CallStaticVoidMethodA as * const _ as usize } , 1144usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( CallStaticVoidMethodA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStaticFieldID as * const _ as usize } , 1152usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStaticFieldID ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStaticObjectField as * const _ as usize } , 1160usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStaticObjectField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStaticBooleanField as * const _ as usize } , 1168usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStaticBooleanField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStaticByteField as * const _ as usize } , 1176usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStaticByteField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStaticCharField as * const _ as usize } , 1184usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStaticCharField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStaticShortField as * const _ as usize } , 1192usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStaticShortField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStaticIntField as * const _ as usize } , 1200usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStaticIntField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStaticLongField as * const _ as usize } , 1208usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStaticLongField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStaticFloatField as * const _ as usize } , 1216usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStaticFloatField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStaticDoubleField as * const _ as usize } , 1224usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStaticDoubleField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetStaticObjectField as * const _ as usize } , 1232usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetStaticObjectField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetStaticBooleanField as * const _ as usize } , 1240usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetStaticBooleanField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetStaticByteField as * const _ as usize } , 1248usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetStaticByteField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetStaticCharField as * const _ as usize } , 1256usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetStaticCharField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetStaticShortField as * const _ as usize } , 1264usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetStaticShortField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetStaticIntField as * const _ as usize } , 1272usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetStaticIntField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetStaticLongField as * const _ as usize } , 1280usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetStaticLongField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetStaticFloatField as * const _ as usize } , 1288usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetStaticFloatField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetStaticDoubleField as * const _ as usize } , 1296usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetStaticDoubleField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewString as * const _ as usize } , 1304usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewString ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStringLength as * const _ as usize } , 1312usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStringLength ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStringChars as * const _ as usize } , 1320usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStringChars ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ReleaseStringChars as * const _ as usize } , 1328usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ReleaseStringChars ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewStringUTF as * const _ as usize } , 1336usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewStringUTF ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStringUTFLength as * const _ as usize } , 1344usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStringUTFLength ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStringUTFChars as * const _ as usize } , 1352usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStringUTFChars ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ReleaseStringUTFChars as * const _ as usize } , 1360usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ReleaseStringUTFChars ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetArrayLength as * const _ as usize } , 1368usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetArrayLength ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewObjectArray as * const _ as usize } , 1376usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewObjectArray ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetObjectArrayElement as * const _ as usize } , 1384usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetObjectArrayElement ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetObjectArrayElement as * const _ as usize } , 1392usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetObjectArrayElement ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewBooleanArray as * const _ as usize } , 1400usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewBooleanArray ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewByteArray as * const _ as usize } , 1408usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewByteArray ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewCharArray as * const _ as usize } , 1416usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewCharArray ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewShortArray as * const _ as usize } , 1424usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewShortArray ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewIntArray as * const _ as usize } , 1432usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewIntArray ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewLongArray as * const _ as usize } , 1440usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewLongArray ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewFloatArray as * const _ as usize } , 1448usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewFloatArray ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewDoubleArray as * const _ as usize } , 1456usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewDoubleArray ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetBooleanArrayElements as * const _ as usize } , 1464usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetBooleanArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetByteArrayElements as * const _ as usize } , 1472usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetByteArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetCharArrayElements as * const _ as usize } , 1480usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetCharArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetShortArrayElements as * const _ as usize } , 1488usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetShortArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetIntArrayElements as * const _ as usize } , 1496usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetIntArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetLongArrayElements as * const _ as usize } , 1504usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetLongArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetFloatArrayElements as * const _ as usize } , 1512usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetFloatArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetDoubleArrayElements as * const _ as usize } , 1520usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetDoubleArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ReleaseBooleanArrayElements as * const _ as usize } , 1528usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ReleaseBooleanArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ReleaseByteArrayElements as * const _ as usize } , 1536usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ReleaseByteArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ReleaseCharArrayElements as * const _ as usize } , 1544usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ReleaseCharArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ReleaseShortArrayElements as * const _ as usize } , 1552usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ReleaseShortArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ReleaseIntArrayElements as * const _ as usize } , 1560usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ReleaseIntArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ReleaseLongArrayElements as * const _ as usize } , 1568usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ReleaseLongArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ReleaseFloatArrayElements as * const _ as usize } , 1576usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ReleaseFloatArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ReleaseDoubleArrayElements as * const _ as usize } , 1584usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ReleaseDoubleArrayElements ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetBooleanArrayRegion as * const _ as usize } , 1592usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetBooleanArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetByteArrayRegion as * const _ as usize } , 1600usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetByteArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetCharArrayRegion as * const _ as usize } , 1608usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetCharArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetShortArrayRegion as * const _ as usize } , 1616usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetShortArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetIntArrayRegion as * const _ as usize } , 1624usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetIntArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetLongArrayRegion as * const _ as usize } , 1632usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetLongArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetFloatArrayRegion as * const _ as usize } , 1640usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetFloatArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetDoubleArrayRegion as * const _ as usize } , 1648usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetDoubleArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetBooleanArrayRegion as * const _ as usize } , 1656usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetBooleanArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetByteArrayRegion as * const _ as usize } , 1664usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetByteArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetCharArrayRegion as * const _ as usize } , 1672usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetCharArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetShortArrayRegion as * const _ as usize } , 1680usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetShortArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetIntArrayRegion as * const _ as usize } , 1688usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetIntArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetLongArrayRegion as * const _ as usize } , 1696usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetLongArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetFloatArrayRegion as * const _ as usize } , 1704usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetFloatArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . SetDoubleArrayRegion as * const _ as usize } , 1712usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( SetDoubleArrayRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . RegisterNatives as * const _ as usize } , 1720usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( RegisterNatives ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . UnregisterNatives as * const _ as usize } , 1728usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( UnregisterNatives ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . MonitorEnter as * const _ as usize } , 1736usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( MonitorEnter ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . MonitorExit as * const _ as usize } , 1744usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( MonitorExit ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetJavaVM as * const _ as usize } , 1752usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetJavaVM ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStringRegion as * const _ as usize } , 1760usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStringRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStringUTFRegion as * const _ as usize } , 1768usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStringUTFRegion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetPrimitiveArrayCritical as * const _ as usize } , 1776usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetPrimitiveArrayCritical ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ReleasePrimitiveArrayCritical as * const _ as usize } , 1784usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ReleasePrimitiveArrayCritical ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetStringCritical as * const _ as usize } , 1792usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetStringCritical ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ReleaseStringCritical as * const _ as usize } , 1800usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ReleaseStringCritical ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewWeakGlobalRef as * const _ as usize } , 1808usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewWeakGlobalRef ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . DeleteWeakGlobalRef as * const _ as usize } , 1816usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( DeleteWeakGlobalRef ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . ExceptionCheck as * const _ as usize } , 1824usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( ExceptionCheck ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . NewDirectByteBuffer as * const _ as usize } , 1832usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( NewDirectByteBuffer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetDirectBufferAddress as * const _ as usize } , 1840usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetDirectBufferAddress ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetDirectBufferCapacity as * const _ as usize } , 1848usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetDirectBufferCapacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNINativeInterface_ > ( ) ) ) . GetObjectRefType as * const _ as usize } , 1856usize , concat ! ( "Offset of field: " , stringify ! ( JNINativeInterface_ ) , "::" , stringify ! ( GetObjectRefType ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct JNIEnv_ { pub functions : * const JNINativeInterface_ , } # [ test ] fn bindgen_test_layout_JNIEnv_ ( ) { assert_eq ! ( :: std :: mem :: size_of :: < JNIEnv_ > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( JNIEnv_ ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < JNIEnv_ > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( JNIEnv_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNIEnv_ > ( ) ) ) . functions as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( JNIEnv_ ) , "::" , stringify ! ( functions ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct JavaVMOption { pub optionString : * mut :: std :: os :: raw :: c_char , pub extraInfo : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_JavaVMOption ( ) { assert_eq ! ( :: std :: mem :: size_of :: < JavaVMOption > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( JavaVMOption ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < JavaVMOption > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( JavaVMOption ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JavaVMOption > ( ) ) ) . optionString as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( JavaVMOption ) , "::" , stringify ! ( optionString ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JavaVMOption > ( ) ) ) . extraInfo as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( JavaVMOption ) , "::" , stringify ! ( extraInfo ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct JavaVMInitArgs { pub version : jint , pub nOptions : jint , pub options : * mut JavaVMOption , pub ignoreUnrecognized : jboolean , } # [ test ] fn bindgen_test_layout_JavaVMInitArgs ( ) { assert_eq ! ( :: std :: mem :: size_of :: < JavaVMInitArgs > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( JavaVMInitArgs ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < JavaVMInitArgs > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( JavaVMInitArgs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JavaVMInitArgs > ( ) ) ) . version as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( JavaVMInitArgs ) , "::" , stringify ! ( version ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JavaVMInitArgs > ( ) ) ) . nOptions as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( JavaVMInitArgs ) , "::" , stringify ! ( nOptions ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JavaVMInitArgs > ( ) ) ) . options as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( JavaVMInitArgs ) , "::" , stringify ! ( options ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JavaVMInitArgs > ( ) ) ) . ignoreUnrecognized as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( JavaVMInitArgs ) , "::" , stringify ! ( ignoreUnrecognized ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct JavaVMAttachArgs { pub version : jint , pub name : * mut :: std :: os :: raw :: c_char , pub group : jobject , } # [ test ] fn bindgen_test_layout_JavaVMAttachArgs ( ) { assert_eq ! ( :: std :: mem :: size_of :: < JavaVMAttachArgs > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( JavaVMAttachArgs ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < JavaVMAttachArgs > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( JavaVMAttachArgs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JavaVMAttachArgs > ( ) ) ) . version as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( JavaVMAttachArgs ) , "::" , stringify ! ( version ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JavaVMAttachArgs > ( ) ) ) . name as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( JavaVMAttachArgs ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JavaVMAttachArgs > ( ) ) ) . group as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( JavaVMAttachArgs ) , "::" , stringify ! ( group ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct JNIInvokeInterface_ { pub reserved0 : * mut :: std :: os :: raw :: c_void , pub reserved1 : * mut :: std :: os :: raw :: c_void , pub reserved2 : * mut :: std :: os :: raw :: c_void , pub DestroyJavaVM : :: std :: option :: Option < unsafe extern "C" fn ( vm : * mut JavaVM ) -> jint > , pub AttachCurrentThread : :: std :: option :: Option < unsafe extern "C" fn ( vm : * mut JavaVM , penv : * mut * mut :: std :: os :: raw :: c_void , args : * mut :: std :: os :: raw :: c_void ) -> jint > , pub DetachCurrentThread : :: std :: option :: Option < unsafe extern "C" fn ( vm : * mut JavaVM ) -> jint > , pub GetEnv : :: std :: option :: Option < unsafe extern "C" fn ( vm : * mut JavaVM , penv : * mut * mut :: std :: os :: raw :: c_void , version : jint ) -> jint > , pub AttachCurrentThreadAsDaemon : :: std :: option :: Option < unsafe extern "C" fn ( vm : * mut JavaVM , penv : * mut * mut :: std :: os :: raw :: c_void , args : * mut :: std :: os :: raw :: c_void ) -> jint > , } # [ test ] fn bindgen_test_layout_JNIInvokeInterface_ ( ) { assert_eq ! ( :: std :: mem :: size_of :: < JNIInvokeInterface_ > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( JNIInvokeInterface_ ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < JNIInvokeInterface_ > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( JNIInvokeInterface_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNIInvokeInterface_ > ( ) ) ) . reserved0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( JNIInvokeInterface_ ) , "::" , stringify ! ( reserved0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNIInvokeInterface_ > ( ) ) ) . reserved1 as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( JNIInvokeInterface_ ) , "::" , stringify ! ( reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNIInvokeInterface_ > ( ) ) ) . reserved2 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( JNIInvokeInterface_ ) , "::" , stringify ! ( reserved2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNIInvokeInterface_ > ( ) ) ) . DestroyJavaVM as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( JNIInvokeInterface_ ) , "::" , stringify ! ( DestroyJavaVM ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNIInvokeInterface_ > ( ) ) ) . AttachCurrentThread as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( JNIInvokeInterface_ ) , "::" , stringify ! ( AttachCurrentThread ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNIInvokeInterface_ > ( ) ) ) . DetachCurrentThread as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( JNIInvokeInterface_ ) , "::" , stringify ! ( DetachCurrentThread ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNIInvokeInterface_ > ( ) ) ) . GetEnv as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( JNIInvokeInterface_ ) , "::" , stringify ! ( GetEnv ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JNIInvokeInterface_ > ( ) ) ) . AttachCurrentThreadAsDaemon as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( JNIInvokeInterface_ ) , "::" , stringify ! ( AttachCurrentThreadAsDaemon ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct JavaVM_ { pub functions : * const JNIInvokeInterface_ , } # [ test ] fn bindgen_test_layout_JavaVM_ ( ) { assert_eq ! ( :: std :: mem :: size_of :: < JavaVM_ > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( JavaVM_ ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < JavaVM_ > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( JavaVM_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < JavaVM_ > ( ) ) ) . functions as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( JavaVM_ ) , "::" , stringify ! ( functions ) ) ) ; } extern "C" { pub fn JNI_GetDefaultJavaVMInitArgs ( args : * mut :: std :: os :: raw :: c_void ) -> jint ; } extern "C" { pub fn JNI_CreateJavaVM ( pvm : * mut * mut JavaVM , penv : * mut * mut :: std :: os :: raw :: c_void , args : * mut :: std :: os :: raw :: c_void ) -> jint ; } extern "C" { pub fn JNI_GetCreatedJavaVMs ( arg1 : * mut * mut JavaVM , arg2 : jsize , arg3 : * mut jsize ) -> jint ; } extern "C" { pub fn JNI_OnLoad ( vm : * mut JavaVM , reserved : * mut :: std :: os :: raw :: c_void ) -> jint ; } extern "C" { pub fn JNI_OnUnload ( vm : * mut JavaVM , reserved : * mut :: std :: os :: raw :: c_void ) ; } pub const JVMTI_VERSION_1 : _bindgen_ty_1 = 805371904 ; pub const JVMTI_VERSION_1_0 : _bindgen_ty_1 = 805371904 ; pub const JVMTI_VERSION_1_1 : _bindgen_ty_1 = 805372160 ; pub const JVMTI_VERSION_1_2 : _bindgen_ty_1 = 805372416 ; pub const JVMTI_VERSION : _bindgen_ty_1 = 805372417 ; pub type _bindgen_ty_1 = u32 ; extern "C" { pub fn Agent_OnLoad ( vm : * mut JavaVM , options : * mut :: std :: os :: raw :: c_char , reserved : * mut :: std :: os :: raw :: c_void ) -> jint ; } extern "C" { pub fn Agent_OnAttach ( vm : * mut JavaVM , options : * mut :: std :: os :: raw :: c_char , reserved : * mut :: std :: os :: raw :: c_void ) -> jint ; } extern "C" { pub fn Agent_OnUnload ( vm : * mut JavaVM ) ; } pub type jvmtiEnv = * const jvmtiInterface_1_ ; pub type jthread = jobject ; pub type jthreadGroup = jobject ; pub type jlocation = jlong ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jrawMonitorID { _unused : [ u8 ; 0 ] , } pub type jrawMonitorID = * mut _jrawMonitorID ; pub type jniNativeInterface = JNINativeInterface_ ; pub const JVMTI_THREAD_STATE_ALIVE : _bindgen_ty_2 = 1 ; pub const JVMTI_THREAD_STATE_TERMINATED : _bindgen_ty_2 = 2 ; pub const JVMTI_THREAD_STATE_RUNNABLE : _bindgen_ty_2 = 4 ; pub const JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER : _bindgen_ty_2 = 1024 ; pub const JVMTI_THREAD_STATE_WAITING : _bindgen_ty_2 = 128 ; pub const JVMTI_THREAD_STATE_WAITING_INDEFINITELY : _bindgen_ty_2 = 16 ; pub const JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT : _bindgen_ty_2 = 32 ; pub const JVMTI_THREAD_STATE_SLEEPING : _bindgen_ty_2 = 64 ; pub const JVMTI_THREAD_STATE_IN_OBJECT_WAIT : _bindgen_ty_2 = 256 ; pub const JVMTI_THREAD_STATE_PARKED : _bindgen_ty_2 = 512 ; pub const JVMTI_THREAD_STATE_SUSPENDED : _bindgen_ty_2 = 1048576 ; pub const JVMTI_THREAD_STATE_INTERRUPTED : _bindgen_ty_2 = 2097152 ; pub const JVMTI_THREAD_STATE_IN_NATIVE : _bindgen_ty_2 = 4194304 ; pub const JVMTI_THREAD_STATE_VENDOR_1 : _bindgen_ty_2 = 268435456 ; pub const JVMTI_THREAD_STATE_VENDOR_2 : _bindgen_ty_2 = 536870912 ; pub const JVMTI_THREAD_STATE_VENDOR_3 : _bindgen_ty_2 = 1073741824 ; pub type _bindgen_ty_2 = u32 ; pub const JVMTI_JAVA_LANG_THREAD_STATE_MASK : _bindgen_ty_3 = 1207 ; pub const JVMTI_JAVA_LANG_THREAD_STATE_NEW : _bindgen_ty_3 = 0 ; pub const JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED : _bindgen_ty_3 = 2 ; pub const JVMTI_JAVA_LANG_THREAD_STATE_RUNNABLE : _bindgen_ty_3 = 5 ; pub const JVMTI_JAVA_LANG_THREAD_STATE_BLOCKED : _bindgen_ty_3 = 1025 ; pub const JVMTI_JAVA_LANG_THREAD_STATE_WAITING : _bindgen_ty_3 = 145 ; pub const JVMTI_JAVA_LANG_THREAD_STATE_TIMED_WAITING : _bindgen_ty_3 = 161 ; pub type _bindgen_ty_3 = u32 ; pub const JVMTI_THREAD_MIN_PRIORITY : _bindgen_ty_4 = 1 ; pub const JVMTI_THREAD_NORM_PRIORITY : _bindgen_ty_4 = 5 ; pub const JVMTI_THREAD_MAX_PRIORITY : _bindgen_ty_4 = 10 ; pub type _bindgen_ty_4 = u32 ; pub const JVMTI_HEAP_FILTER_TAGGED : _bindgen_ty_5 = 4 ; pub const JVMTI_HEAP_FILTER_UNTAGGED : _bindgen_ty_5 = 8 ; pub const JVMTI_HEAP_FILTER_CLASS_TAGGED : _bindgen_ty_5 = 16 ; pub const JVMTI_HEAP_FILTER_CLASS_UNTAGGED : _bindgen_ty_5 = 32 ; pub type _bindgen_ty_5 = u32 ; pub const JVMTI_VISIT_OBJECTS : _bindgen_ty_6 = 256 ; pub const JVMTI_VISIT_ABORT : _bindgen_ty_6 = 32768 ; pub type _bindgen_ty_6 = u32 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_CLASS : jvmtiHeapReferenceKind = 1 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_FIELD : jvmtiHeapReferenceKind = 2 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT : jvmtiHeapReferenceKind = 3 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_CLASS_LOADER : jvmtiHeapReferenceKind = 4 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_SIGNERS : jvmtiHeapReferenceKind = 5 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_PROTECTION_DOMAIN : jvmtiHeapReferenceKind = 6 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_INTERFACE : jvmtiHeapReferenceKind = 7 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_STATIC_FIELD : jvmtiHeapReferenceKind = 8 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_CONSTANT_POOL : jvmtiHeapReferenceKind = 9 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_SUPERCLASS : jvmtiHeapReferenceKind = 10 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_JNI_GLOBAL : jvmtiHeapReferenceKind = 21 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_SYSTEM_CLASS : jvmtiHeapReferenceKind = 22 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_MONITOR : jvmtiHeapReferenceKind = 23 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_STACK_LOCAL : jvmtiHeapReferenceKind = 24 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_JNI_LOCAL : jvmtiHeapReferenceKind = 25 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_THREAD : jvmtiHeapReferenceKind = 26 ; pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_OTHER : jvmtiHeapReferenceKind = 27 ; pub type jvmtiHeapReferenceKind = u32 ; pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_BOOLEAN : jvmtiPrimitiveType = 90 ; pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_BYTE : jvmtiPrimitiveType = 66 ; pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_CHAR : jvmtiPrimitiveType = 67 ; pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_SHORT : jvmtiPrimitiveType = 83 ; pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_INT : jvmtiPrimitiveType = 73 ; pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_LONG : jvmtiPrimitiveType = 74 ; pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_FLOAT : jvmtiPrimitiveType = 70 ; pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_DOUBLE : jvmtiPrimitiveType = 68 ; pub type jvmtiPrimitiveType = u32 ; pub const jvmtiHeapObjectFilter_JVMTI_HEAP_OBJECT_TAGGED : jvmtiHeapObjectFilter = 1 ; pub const jvmtiHeapObjectFilter_JVMTI_HEAP_OBJECT_UNTAGGED : jvmtiHeapObjectFilter = 2 ; pub const jvmtiHeapObjectFilter_JVMTI_HEAP_OBJECT_EITHER : jvmtiHeapObjectFilter = 3 ; pub type jvmtiHeapObjectFilter = u32 ; pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_JNI_GLOBAL : jvmtiHeapRootKind = 1 ; pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_SYSTEM_CLASS : jvmtiHeapRootKind = 2 ; pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_MONITOR : jvmtiHeapRootKind = 3 ; pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_STACK_LOCAL : jvmtiHeapRootKind = 4 ; pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_JNI_LOCAL : jvmtiHeapRootKind = 5 ; pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_THREAD : jvmtiHeapRootKind = 6 ; pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_OTHER : jvmtiHeapRootKind = 7 ; pub type jvmtiHeapRootKind = u32 ; pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_CLASS : jvmtiObjectReferenceKind = 1 ; pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_FIELD : jvmtiObjectReferenceKind = 2 ; pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_ARRAY_ELEMENT : jvmtiObjectReferenceKind = 3 ; pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_CLASS_LOADER : jvmtiObjectReferenceKind = 4 ; pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_SIGNERS : jvmtiObjectReferenceKind = 5 ; pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_PROTECTION_DOMAIN : jvmtiObjectReferenceKind = 6 ; pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_INTERFACE : jvmtiObjectReferenceKind = 7 ; pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_STATIC_FIELD : jvmtiObjectReferenceKind = 8 ; pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_CONSTANT_POOL : jvmtiObjectReferenceKind = 9 ; pub type jvmtiObjectReferenceKind = u32 ; pub const jvmtiIterationControl_JVMTI_ITERATION_CONTINUE : jvmtiIterationControl = 1 ; pub const jvmtiIterationControl_JVMTI_ITERATION_IGNORE : jvmtiIterationControl = 2 ; pub const jvmtiIterationControl_JVMTI_ITERATION_ABORT : jvmtiIterationControl = 0 ; pub type jvmtiIterationControl = u32 ; pub const JVMTI_CLASS_STATUS_VERIFIED : _bindgen_ty_7 = 1 ; pub const JVMTI_CLASS_STATUS_PREPARED : _bindgen_ty_7 = 2 ; pub const JVMTI_CLASS_STATUS_INITIALIZED : _bindgen_ty_7 = 4 ; pub const JVMTI_CLASS_STATUS_ERROR : _bindgen_ty_7 = 8 ; pub const JVMTI_CLASS_STATUS_ARRAY : _bindgen_ty_7 = 16 ; pub const JVMTI_CLASS_STATUS_PRIMITIVE : _bindgen_ty_7 = 32 ; pub type _bindgen_ty_7 = u32 ; pub const jvmtiEventMode_JVMTI_ENABLE : jvmtiEventMode = 1 ; pub const jvmtiEventMode_JVMTI_DISABLE : jvmtiEventMode = 0 ; pub type jvmtiEventMode = u32 ; pub const jvmtiParamTypes_JVMTI_TYPE_JBYTE : jvmtiParamTypes = 101 ; pub const jvmtiParamTypes_JVMTI_TYPE_JCHAR : jvmtiParamTypes = 102 ; pub const jvmtiParamTypes_JVMTI_TYPE_JSHORT : jvmtiParamTypes = 103 ; pub const jvmtiParamTypes_JVMTI_TYPE_JINT : jvmtiParamTypes = 104 ; pub const jvmtiParamTypes_JVMTI_TYPE_JLONG : jvmtiParamTypes = 105 ; pub const jvmtiParamTypes_JVMTI_TYPE_JFLOAT : jvmtiParamTypes = 106 ; pub const jvmtiParamTypes_JVMTI_TYPE_JDOUBLE : jvmtiParamTypes = 107 ; pub const jvmtiParamTypes_JVMTI_TYPE_JBOOLEAN : jvmtiParamTypes = 108 ; pub const jvmtiParamTypes_JVMTI_TYPE_JOBJECT : jvmtiParamTypes = 109 ; pub const jvmtiParamTypes_JVMTI_TYPE_JTHREAD : jvmtiParamTypes = 110 ; pub const jvmtiParamTypes_JVMTI_TYPE_JCLASS : jvmtiParamTypes = 111 ; pub const jvmtiParamTypes_JVMTI_TYPE_JVALUE : jvmtiParamTypes = 112 ; pub const jvmtiParamTypes_JVMTI_TYPE_JFIELDID : jvmtiParamTypes = 113 ; pub const jvmtiParamTypes_JVMTI_TYPE_JMETHODID : jvmtiParamTypes = 114 ; pub const jvmtiParamTypes_JVMTI_TYPE_CCHAR : jvmtiParamTypes = 115 ; pub const jvmtiParamTypes_JVMTI_TYPE_CVOID : jvmtiParamTypes = 116 ; pub const jvmtiParamTypes_JVMTI_TYPE_JNIENV : jvmtiParamTypes = 117 ; pub type jvmtiParamTypes = u32 ; pub const jvmtiParamKind_JVMTI_KIND_IN : jvmtiParamKind = 91 ; pub const jvmtiParamKind_JVMTI_KIND_IN_PTR : jvmtiParamKind = 92 ; pub const jvmtiParamKind_JVMTI_KIND_IN_BUF : jvmtiParamKind = 93 ; pub const jvmtiParamKind_JVMTI_KIND_ALLOC_BUF : jvmtiParamKind = 94 ; pub const jvmtiParamKind_JVMTI_KIND_ALLOC_ALLOC_BUF : jvmtiParamKind = 95 ; pub const jvmtiParamKind_JVMTI_KIND_OUT : jvmtiParamKind = 96 ; pub const jvmtiParamKind_JVMTI_KIND_OUT_BUF : jvmtiParamKind = 97 ; pub type jvmtiParamKind = u32 ; pub const jvmtiTimerKind_JVMTI_TIMER_USER_CPU : jvmtiTimerKind = 30 ; pub const jvmtiTimerKind_JVMTI_TIMER_TOTAL_CPU : jvmtiTimerKind = 31 ; pub const jvmtiTimerKind_JVMTI_TIMER_ELAPSED : jvmtiTimerKind = 32 ; pub type jvmtiTimerKind = u32 ; pub const jvmtiPhase_JVMTI_PHASE_ONLOAD : jvmtiPhase = 1 ; pub const jvmtiPhase_JVMTI_PHASE_PRIMORDIAL : jvmtiPhase = 2 ; pub const jvmtiPhase_JVMTI_PHASE_START : jvmtiPhase = 6 ; pub const jvmtiPhase_JVMTI_PHASE_LIVE : jvmtiPhase = 4 ; pub const jvmtiPhase_JVMTI_PHASE_DEAD : jvmtiPhase = 8 ; pub type jvmtiPhase = u32 ; pub const JVMTI_VERSION_INTERFACE_JNI : _bindgen_ty_8 = 0 ; pub const JVMTI_VERSION_INTERFACE_JVMTI : _bindgen_ty_8 = 805306368 ; pub type _bindgen_ty_8 = u32 ; pub const JVMTI_VERSION_MASK_INTERFACE_TYPE : _bindgen_ty_9 = 1879048192 ; pub const JVMTI_VERSION_MASK_MAJOR : _bindgen_ty_9 = 268369920 ; pub const JVMTI_VERSION_MASK_MINOR : _bindgen_ty_9 = 65280 ; pub const JVMTI_VERSION_MASK_MICRO : _bindgen_ty_9 = 255 ; pub type _bindgen_ty_9 = u32 ; pub const JVMTI_VERSION_SHIFT_MAJOR : _bindgen_ty_10 = 16 ; pub const JVMTI_VERSION_SHIFT_MINOR : _bindgen_ty_10 = 8 ; pub const JVMTI_VERSION_SHIFT_MICRO : _bindgen_ty_10 = 0 ; pub type _bindgen_ty_10 = u32 ; pub const jvmtiVerboseFlag_JVMTI_VERBOSE_OTHER : jvmtiVerboseFlag = 0 ; pub const jvmtiVerboseFlag_JVMTI_VERBOSE_GC : jvmtiVerboseFlag = 1 ; pub const jvmtiVerboseFlag_JVMTI_VERBOSE_CLASS : jvmtiVerboseFlag = 2 ; pub const jvmtiVerboseFlag_JVMTI_VERBOSE_JNI : jvmtiVerboseFlag = 4 ; pub type jvmtiVerboseFlag = u32 ; pub const jvmtiJlocationFormat_JVMTI_JLOCATION_JVMBCI : jvmtiJlocationFormat = 1 ; pub const jvmtiJlocationFormat_JVMTI_JLOCATION_MACHINEPC : jvmtiJlocationFormat = 2 ; pub const jvmtiJlocationFormat_JVMTI_JLOCATION_OTHER : jvmtiJlocationFormat = 0 ; pub type jvmtiJlocationFormat = u32 ; pub const JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR : _bindgen_ty_11 = 1 ; pub const JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP : _bindgen_ty_11 = 2 ; pub const JVMTI_RESOURCE_EXHAUSTED_THREADS : _bindgen_ty_11 = 4 ; pub type _bindgen_ty_11 = u32 ; pub const jvmtiError_JVMTI_ERROR_NONE : jvmtiError = 0 ; pub const jvmtiError_JVMTI_ERROR_INVALID_THREAD : jvmtiError = 10 ; pub const jvmtiError_JVMTI_ERROR_INVALID_THREAD_GROUP : jvmtiError = 11 ; pub const jvmtiError_JVMTI_ERROR_INVALID_PRIORITY : jvmtiError = 12 ; pub const jvmtiError_JVMTI_ERROR_THREAD_NOT_SUSPENDED : jvmtiError = 13 ; pub const jvmtiError_JVMTI_ERROR_THREAD_SUSPENDED : jvmtiError = 14 ; pub const jvmtiError_JVMTI_ERROR_THREAD_NOT_ALIVE : jvmtiError = 15 ; pub const jvmtiError_JVMTI_ERROR_INVALID_OBJECT : jvmtiError = 20 ; pub const jvmtiError_JVMTI_ERROR_INVALID_CLASS : jvmtiError = 21 ; pub const jvmtiError_JVMTI_ERROR_CLASS_NOT_PREPARED : jvmtiError = 22 ; pub const jvmtiError_JVMTI_ERROR_INVALID_METHODID : jvmtiError = 23 ; pub const jvmtiError_JVMTI_ERROR_INVALID_LOCATION : jvmtiError = 24 ; pub const jvmtiError_JVMTI_ERROR_INVALID_FIELDID : jvmtiError = 25 ; pub const jvmtiError_JVMTI_ERROR_NO_MORE_FRAMES : jvmtiError = 31 ; pub const jvmtiError_JVMTI_ERROR_OPAQUE_FRAME : jvmtiError = 32 ; pub const jvmtiError_JVMTI_ERROR_TYPE_MISMATCH : jvmtiError = 34 ; pub const jvmtiError_JVMTI_ERROR_INVALID_SLOT : jvmtiError = 35 ; pub const jvmtiError_JVMTI_ERROR_DUPLICATE : jvmtiError = 40 ; pub const jvmtiError_JVMTI_ERROR_NOT_FOUND : jvmtiError = 41 ; pub const jvmtiError_JVMTI_ERROR_INVALID_MONITOR : jvmtiError = 50 ; pub const jvmtiError_JVMTI_ERROR_NOT_MONITOR_OWNER : jvmtiError = 51 ; pub const jvmtiError_JVMTI_ERROR_INTERRUPT : jvmtiError = 52 ; pub const jvmtiError_JVMTI_ERROR_INVALID_CLASS_FORMAT : jvmtiError = 60 ; pub const jvmtiError_JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION : jvmtiError = 61 ; pub const jvmtiError_JVMTI_ERROR_FAILS_VERIFICATION : jvmtiError = 62 ; pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED : jvmtiError = 63 ; pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED : jvmtiError = 64 ; pub const jvmtiError_JVMTI_ERROR_INVALID_TYPESTATE : jvmtiError = 65 ; pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED : jvmtiError = 66 ; pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED : jvmtiError = 67 ; pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_VERSION : jvmtiError = 68 ; pub const jvmtiError_JVMTI_ERROR_NAMES_DONT_MATCH : jvmtiError = 69 ; pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED : jvmtiError = 70 ; pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED : jvmtiError = 71 ; pub const jvmtiError_JVMTI_ERROR_UNMODIFIABLE_CLASS : jvmtiError = 79 ; pub const jvmtiError_JVMTI_ERROR_NOT_AVAILABLE : jvmtiError = 98 ; pub const jvmtiError_JVMTI_ERROR_MUST_POSSESS_CAPABILITY : jvmtiError = 99 ; pub const jvmtiError_JVMTI_ERROR_NULL_POINTER : jvmtiError = 100 ; pub const jvmtiError_JVMTI_ERROR_ABSENT_INFORMATION : jvmtiError = 101 ; pub const jvmtiError_JVMTI_ERROR_INVALID_EVENT_TYPE : jvmtiError = 102 ; pub const jvmtiError_JVMTI_ERROR_ILLEGAL_ARGUMENT : jvmtiError = 103 ; pub const jvmtiError_JVMTI_ERROR_NATIVE_METHOD : jvmtiError = 104 ; pub const jvmtiError_JVMTI_ERROR_CLASS_LOADER_UNSUPPORTED : jvmtiError = 106 ; pub const jvmtiError_JVMTI_ERROR_OUT_OF_MEMORY : jvmtiError = 110 ; pub const jvmtiError_JVMTI_ERROR_ACCESS_DENIED : jvmtiError = 111 ; pub const jvmtiError_JVMTI_ERROR_WRONG_PHASE : jvmtiError = 112 ; pub const jvmtiError_JVMTI_ERROR_INTERNAL : jvmtiError = 113 ; pub const jvmtiError_JVMTI_ERROR_UNATTACHED_THREAD : jvmtiError = 115 ; pub const jvmtiError_JVMTI_ERROR_INVALID_ENVIRONMENT : jvmtiError = 116 ; pub const jvmtiError_JVMTI_ERROR_MAX : jvmtiError = 116 ; pub type jvmtiError = u32 ; pub const jvmtiEvent_JVMTI_MIN_EVENT_TYPE_VAL : jvmtiEvent = 50 ; pub const jvmtiEvent_JVMTI_EVENT_VM_INIT : jvmtiEvent = 50 ; pub const jvmtiEvent_JVMTI_EVENT_VM_DEATH : jvmtiEvent = 51 ; pub const jvmtiEvent_JVMTI_EVENT_THREAD_START : jvmtiEvent = 52 ; pub const jvmtiEvent_JVMTI_EVENT_THREAD_END : jvmtiEvent = 53 ; pub const jvmtiEvent_JVMTI_EVENT_CLASS_FILE_LOAD_HOOK : jvmtiEvent = 54 ; pub const jvmtiEvent_JVMTI_EVENT_CLASS_LOAD : jvmtiEvent = 55 ; pub const jvmtiEvent_JVMTI_EVENT_CLASS_PREPARE : jvmtiEvent = 56 ; pub const jvmtiEvent_JVMTI_EVENT_VM_START : jvmtiEvent = 57 ; pub const jvmtiEvent_JVMTI_EVENT_EXCEPTION : jvmtiEvent = 58 ; pub const jvmtiEvent_JVMTI_EVENT_EXCEPTION_CATCH : jvmtiEvent = 59 ; pub const jvmtiEvent_JVMTI_EVENT_SINGLE_STEP : jvmtiEvent = 60 ; pub const jvmtiEvent_JVMTI_EVENT_FRAME_POP : jvmtiEvent = 61 ; pub const jvmtiEvent_JVMTI_EVENT_BREAKPOINT : jvmtiEvent = 62 ; pub const jvmtiEvent_JVMTI_EVENT_FIELD_ACCESS : jvmtiEvent = 63 ; pub const jvmtiEvent_JVMTI_EVENT_FIELD_MODIFICATION : jvmtiEvent = 64 ; pub const jvmtiEvent_JVMTI_EVENT_METHOD_ENTRY : jvmtiEvent = 65 ; pub const jvmtiEvent_JVMTI_EVENT_METHOD_EXIT : jvmtiEvent = 66 ; pub const jvmtiEvent_JVMTI_EVENT_NATIVE_METHOD_BIND : jvmtiEvent = 67 ; pub const jvmtiEvent_JVMTI_EVENT_COMPILED_METHOD_LOAD : jvmtiEvent = 68 ; pub const jvmtiEvent_JVMTI_EVENT_COMPILED_METHOD_UNLOAD : jvmtiEvent = 69 ; pub const jvmtiEvent_JVMTI_EVENT_DYNAMIC_CODE_GENERATED : jvmtiEvent = 70 ; pub const jvmtiEvent_JVMTI_EVENT_DATA_DUMP_REQUEST : jvmtiEvent = 71 ; pub const jvmtiEvent_JVMTI_EVENT_MONITOR_WAIT : jvmtiEvent = 73 ; pub const jvmtiEvent_JVMTI_EVENT_MONITOR_WAITED : jvmtiEvent = 74 ; pub const jvmtiEvent_JVMTI_EVENT_MONITOR_CONTENDED_ENTER : jvmtiEvent = 75 ; pub const jvmtiEvent_JVMTI_EVENT_MONITOR_CONTENDED_ENTERED : jvmtiEvent = 76 ; pub const jvmtiEvent_JVMTI_EVENT_RESOURCE_EXHAUSTED : jvmtiEvent = 80 ; pub const jvmtiEvent_JVMTI_EVENT_GARBAGE_COLLECTION_START : jvmtiEvent = 81 ; pub const jvmtiEvent_JVMTI_EVENT_GARBAGE_COLLECTION_FINISH : jvmtiEvent = 82 ; pub const jvmtiEvent_JVMTI_EVENT_OBJECT_FREE : jvmtiEvent = 83 ; pub const jvmtiEvent_JVMTI_EVENT_VM_OBJECT_ALLOC : jvmtiEvent = 84 ; pub const jvmtiEvent_JVMTI_MAX_EVENT_TYPE_VAL : jvmtiEvent = 84 ; pub type jvmtiEvent = u32 ; pub type jvmtiThreadInfo = _jvmtiThreadInfo ; pub type jvmtiMonitorStackDepthInfo = _jvmtiMonitorStackDepthInfo ; pub type jvmtiThreadGroupInfo = _jvmtiThreadGroupInfo ; pub type jvmtiFrameInfo = _jvmtiFrameInfo ; pub type jvmtiStackInfo = _jvmtiStackInfo ; pub type jvmtiHeapReferenceInfoField = _jvmtiHeapReferenceInfoField ; pub type jvmtiHeapReferenceInfoArray = _jvmtiHeapReferenceInfoArray ; pub type jvmtiHeapReferenceInfoConstantPool = _jvmtiHeapReferenceInfoConstantPool ; pub type jvmtiHeapReferenceInfoStackLocal = _jvmtiHeapReferenceInfoStackLocal ; pub type jvmtiHeapReferenceInfoJniLocal = _jvmtiHeapReferenceInfoJniLocal ; pub type jvmtiHeapReferenceInfoReserved = _jvmtiHeapReferenceInfoReserved ; pub type jvmtiHeapReferenceInfo = _jvmtiHeapReferenceInfo ; pub type jvmtiHeapCallbacks = _jvmtiHeapCallbacks ; pub type jvmtiClassDefinition = _jvmtiClassDefinition ; pub type jvmtiMonitorUsage = _jvmtiMonitorUsage ; pub type jvmtiLineNumberEntry = _jvmtiLineNumberEntry ; pub type jvmtiLocalVariableEntry = _jvmtiLocalVariableEntry ; pub type jvmtiParamInfo = _jvmtiParamInfo ; pub type jvmtiExtensionFunctionInfo = _jvmtiExtensionFunctionInfo ; pub type jvmtiExtensionEventInfo = _jvmtiExtensionEventInfo ; pub type jvmtiTimerInfo = _jvmtiTimerInfo ; pub type jvmtiAddrLocationMap = _jvmtiAddrLocationMap ; pub type jvmtiStartFunction = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , arg : * mut :: std :: os :: raw :: c_void ) > ; pub type jvmtiHeapIterationCallback = :: std :: option :: Option < unsafe extern "C" fn ( class_tag : jlong , size : jlong , tag_ptr : * mut jlong , length : jint , user_data : * mut :: std :: os :: raw :: c_void ) -> jint > ; pub type jvmtiHeapReferenceCallback = :: std :: option :: Option < unsafe extern "C" fn ( reference_kind : jvmtiHeapReferenceKind , reference_info : * const jvmtiHeapReferenceInfo , class_tag : jlong , referrer_class_tag : jlong , size : jlong , tag_ptr : * mut jlong , referrer_tag_ptr : * mut jlong , length : jint , user_data : * mut :: std :: os :: raw :: c_void ) -> jint > ; pub type jvmtiPrimitiveFieldCallback = :: std :: option :: Option < unsafe extern "C" fn ( kind : jvmtiHeapReferenceKind , info : * const jvmtiHeapReferenceInfo , object_class_tag : jlong , object_tag_ptr : * mut jlong , value : jvalue , value_type : jvmtiPrimitiveType , user_data : * mut :: std :: os :: raw :: c_void ) -> jint > ; pub type jvmtiArrayPrimitiveValueCallback = :: std :: option :: Option < unsafe extern "C" fn ( class_tag : jlong , size : jlong , tag_ptr : * mut jlong , element_count : jint , element_type : jvmtiPrimitiveType , elements : * const :: std :: os :: raw :: c_void , user_data : * mut :: std :: os :: raw :: c_void ) -> jint > ; pub type jvmtiStringPrimitiveValueCallback = :: std :: option :: Option < unsafe extern "C" fn ( class_tag : jlong , size : jlong , tag_ptr : * mut jlong , value : * const jchar , value_length : jint , user_data : * mut :: std :: os :: raw :: c_void ) -> jint > ; pub type jvmtiReservedCallback = :: std :: option :: Option < unsafe extern "C" fn ( ) -> jint > ; pub type jvmtiHeapObjectCallback = :: std :: option :: Option < unsafe extern "C" fn ( class_tag : jlong , size : jlong , tag_ptr : * mut jlong , user_data : * mut :: std :: os :: raw :: c_void ) -> jvmtiIterationControl > ; pub type jvmtiHeapRootCallback = :: std :: option :: Option < unsafe extern "C" fn ( root_kind : jvmtiHeapRootKind , class_tag : jlong , size : jlong , tag_ptr : * mut jlong , user_data : * mut :: std :: os :: raw :: c_void ) -> jvmtiIterationControl > ; pub type jvmtiStackReferenceCallback = :: std :: option :: Option < unsafe extern "C" fn ( root_kind : jvmtiHeapRootKind , class_tag : jlong , size : jlong , tag_ptr : * mut jlong , thread_tag : jlong , depth : jint , method : jmethodID , slot : jint , user_data : * mut :: std :: os :: raw :: c_void ) -> jvmtiIterationControl > ; pub type jvmtiObjectReferenceCallback = :: std :: option :: Option < unsafe extern "C" fn ( reference_kind : jvmtiObjectReferenceKind , class_tag : jlong , size : jlong , tag_ptr : * mut jlong , referrer_tag : jlong , referrer_index : jint , user_data : * mut :: std :: os :: raw :: c_void ) -> jvmtiIterationControl > ; pub type jvmtiExtensionFunction = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , ... ) -> jvmtiError > ; pub type jvmtiExtensionEvent = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , ... ) > ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiThreadInfo { pub name : * mut :: std :: os :: raw :: c_char , pub priority : jint , pub is_daemon : jboolean , pub thread_group : jthreadGroup , pub context_class_loader : jobject , } # [ test ] fn bindgen_test_layout__jvmtiThreadInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiThreadInfo > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _jvmtiThreadInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiThreadInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiThreadInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiThreadInfo > ( ) ) ) . name as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiThreadInfo ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiThreadInfo > ( ) ) ) . priority as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiThreadInfo ) , "::" , stringify ! ( priority ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiThreadInfo > ( ) ) ) . is_daemon as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiThreadInfo ) , "::" , stringify ! ( is_daemon ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiThreadInfo > ( ) ) ) . thread_group as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiThreadInfo ) , "::" , stringify ! ( thread_group ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiThreadInfo > ( ) ) ) . context_class_loader as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiThreadInfo ) , "::" , stringify ! ( context_class_loader ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiMonitorStackDepthInfo { pub monitor : jobject , pub stack_depth : jint , } # [ test ] fn bindgen_test_layout__jvmtiMonitorStackDepthInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiMonitorStackDepthInfo > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _jvmtiMonitorStackDepthInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiMonitorStackDepthInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiMonitorStackDepthInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiMonitorStackDepthInfo > ( ) ) ) . monitor as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiMonitorStackDepthInfo ) , "::" , stringify ! ( monitor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiMonitorStackDepthInfo > ( ) ) ) . stack_depth as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiMonitorStackDepthInfo ) , "::" , stringify ! ( stack_depth ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiThreadGroupInfo { pub parent : jthreadGroup , pub name : * mut :: std :: os :: raw :: c_char , pub max_priority : jint , pub is_daemon : jboolean , } # [ test ] fn bindgen_test_layout__jvmtiThreadGroupInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiThreadGroupInfo > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _jvmtiThreadGroupInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiThreadGroupInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiThreadGroupInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiThreadGroupInfo > ( ) ) ) . parent as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiThreadGroupInfo ) , "::" , stringify ! ( parent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiThreadGroupInfo > ( ) ) ) . name as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiThreadGroupInfo ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiThreadGroupInfo > ( ) ) ) . max_priority as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiThreadGroupInfo ) , "::" , stringify ! ( max_priority ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiThreadGroupInfo > ( ) ) ) . is_daemon as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiThreadGroupInfo ) , "::" , stringify ! ( is_daemon ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiFrameInfo { pub method : jmethodID , pub location : jlocation , } # [ test ] fn bindgen_test_layout__jvmtiFrameInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiFrameInfo > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _jvmtiFrameInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiFrameInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiFrameInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiFrameInfo > ( ) ) ) . method as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiFrameInfo ) , "::" , stringify ! ( method ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiFrameInfo > ( ) ) ) . location as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiFrameInfo ) , "::" , stringify ! ( location ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiStackInfo { pub thread : jthread , pub state : jint , pub frame_buffer : * mut jvmtiFrameInfo , pub frame_count : jint , } # [ test ] fn bindgen_test_layout__jvmtiStackInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiStackInfo > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _jvmtiStackInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiStackInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiStackInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiStackInfo > ( ) ) ) . thread as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiStackInfo ) , "::" , stringify ! ( thread ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiStackInfo > ( ) ) ) . state as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiStackInfo ) , "::" , stringify ! ( state ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiStackInfo > ( ) ) ) . frame_buffer as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiStackInfo ) , "::" , stringify ! ( frame_buffer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiStackInfo > ( ) ) ) . frame_count as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiStackInfo ) , "::" , stringify ! ( frame_count ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiHeapReferenceInfoField { pub index : jint , } # [ test ] fn bindgen_test_layout__jvmtiHeapReferenceInfoField ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiHeapReferenceInfoField > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( _jvmtiHeapReferenceInfoField ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiHeapReferenceInfoField > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiHeapReferenceInfoField ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoField > ( ) ) ) . index as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoField ) , "::" , stringify ! ( index ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiHeapReferenceInfoArray { pub index : jint , } # [ test ] fn bindgen_test_layout__jvmtiHeapReferenceInfoArray ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiHeapReferenceInfoArray > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( _jvmtiHeapReferenceInfoArray ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiHeapReferenceInfoArray > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiHeapReferenceInfoArray ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoArray > ( ) ) ) . index as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoArray ) , "::" , stringify ! ( index ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiHeapReferenceInfoConstantPool { pub index : jint , } # [ test ] fn bindgen_test_layout__jvmtiHeapReferenceInfoConstantPool ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiHeapReferenceInfoConstantPool > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( _jvmtiHeapReferenceInfoConstantPool ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiHeapReferenceInfoConstantPool > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiHeapReferenceInfoConstantPool ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoConstantPool > ( ) ) ) . index as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoConstantPool ) , "::" , stringify ! ( index ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiHeapReferenceInfoStackLocal { pub thread_tag : jlong , pub thread_id : jlong , pub depth : jint , pub method : jmethodID , pub location : jlocation , pub slot : jint , } # [ test ] fn bindgen_test_layout__jvmtiHeapReferenceInfoStackLocal ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiHeapReferenceInfoStackLocal > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( _jvmtiHeapReferenceInfoStackLocal ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiHeapReferenceInfoStackLocal > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiHeapReferenceInfoStackLocal ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoStackLocal > ( ) ) ) . thread_tag as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoStackLocal ) , "::" , stringify ! ( thread_tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoStackLocal > ( ) ) ) . thread_id as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoStackLocal ) , "::" , stringify ! ( thread_id ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoStackLocal > ( ) ) ) . depth as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoStackLocal ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoStackLocal > ( ) ) ) . method as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoStackLocal ) , "::" , stringify ! ( method ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoStackLocal > ( ) ) ) . location as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoStackLocal ) , "::" , stringify ! ( location ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoStackLocal > ( ) ) ) . slot as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoStackLocal ) , "::" , stringify ! ( slot ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiHeapReferenceInfoJniLocal { pub thread_tag : jlong , pub thread_id : jlong , pub depth : jint , pub method : jmethodID , } # [ test ] fn bindgen_test_layout__jvmtiHeapReferenceInfoJniLocal ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiHeapReferenceInfoJniLocal > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _jvmtiHeapReferenceInfoJniLocal ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiHeapReferenceInfoJniLocal > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiHeapReferenceInfoJniLocal ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoJniLocal > ( ) ) ) . thread_tag as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoJniLocal ) , "::" , stringify ! ( thread_tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoJniLocal > ( ) ) ) . thread_id as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoJniLocal ) , "::" , stringify ! ( thread_id ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoJniLocal > ( ) ) ) . depth as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoJniLocal ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoJniLocal > ( ) ) ) . method as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoJniLocal ) , "::" , stringify ! ( method ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiHeapReferenceInfoReserved { pub reserved1 : jlong , pub reserved2 : jlong , pub reserved3 : jlong , pub reserved4 : jlong , pub reserved5 : jlong , pub reserved6 : jlong , pub reserved7 : jlong , pub reserved8 : jlong , } # [ test ] fn bindgen_test_layout__jvmtiHeapReferenceInfoReserved ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiHeapReferenceInfoReserved > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( _jvmtiHeapReferenceInfoReserved ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiHeapReferenceInfoReserved > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiHeapReferenceInfoReserved ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoReserved > ( ) ) ) . reserved1 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoReserved ) , "::" , stringify ! ( reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoReserved > ( ) ) ) . reserved2 as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoReserved ) , "::" , stringify ! ( reserved2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoReserved > ( ) ) ) . reserved3 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoReserved ) , "::" , stringify ! ( reserved3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoReserved > ( ) ) ) . reserved4 as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoReserved ) , "::" , stringify ! ( reserved4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoReserved > ( ) ) ) . reserved5 as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoReserved ) , "::" , stringify ! ( reserved5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoReserved > ( ) ) ) . reserved6 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoReserved ) , "::" , stringify ! ( reserved6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoReserved > ( ) ) ) . reserved7 as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoReserved ) , "::" , stringify ! ( reserved7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfoReserved > ( ) ) ) . reserved8 as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfoReserved ) , "::" , stringify ! ( reserved8 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union _jvmtiHeapReferenceInfo { pub field : jvmtiHeapReferenceInfoField , pub array : jvmtiHeapReferenceInfoArray , pub constant_pool : jvmtiHeapReferenceInfoConstantPool , pub stack_local : jvmtiHeapReferenceInfoStackLocal , pub jni_local : jvmtiHeapReferenceInfoJniLocal , pub other : jvmtiHeapReferenceInfoReserved , _bindgen_union_align : [ u64 ; 8usize ] , } # [ test ] fn bindgen_test_layout__jvmtiHeapReferenceInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiHeapReferenceInfo > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( _jvmtiHeapReferenceInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiHeapReferenceInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiHeapReferenceInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfo > ( ) ) ) . field as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfo ) , "::" , stringify ! ( field ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfo > ( ) ) ) . array as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfo ) , "::" , stringify ! ( array ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfo > ( ) ) ) . constant_pool as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfo ) , "::" , stringify ! ( constant_pool ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfo > ( ) ) ) . stack_local as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfo ) , "::" , stringify ! ( stack_local ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfo > ( ) ) ) . jni_local as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfo ) , "::" , stringify ! ( jni_local ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapReferenceInfo > ( ) ) ) . other as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapReferenceInfo ) , "::" , stringify ! ( other ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiHeapCallbacks { pub heap_iteration_callback : jvmtiHeapIterationCallback , pub heap_reference_callback : jvmtiHeapReferenceCallback , pub primitive_field_callback : jvmtiPrimitiveFieldCallback , pub array_primitive_value_callback : jvmtiArrayPrimitiveValueCallback , pub string_primitive_value_callback : jvmtiStringPrimitiveValueCallback , pub reserved5 : jvmtiReservedCallback , pub reserved6 : jvmtiReservedCallback , pub reserved7 : jvmtiReservedCallback , pub reserved8 : jvmtiReservedCallback , pub reserved9 : jvmtiReservedCallback , pub reserved10 : jvmtiReservedCallback , pub reserved11 : jvmtiReservedCallback , pub reserved12 : jvmtiReservedCallback , pub reserved13 : jvmtiReservedCallback , pub reserved14 : jvmtiReservedCallback , pub reserved15 : jvmtiReservedCallback , } # [ test ] fn bindgen_test_layout__jvmtiHeapCallbacks ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiHeapCallbacks > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( _jvmtiHeapCallbacks ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiHeapCallbacks > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiHeapCallbacks ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . heap_iteration_callback as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( heap_iteration_callback ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . heap_reference_callback as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( heap_reference_callback ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . primitive_field_callback as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( primitive_field_callback ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . array_primitive_value_callback as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( array_primitive_value_callback ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . string_primitive_value_callback as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( string_primitive_value_callback ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . reserved5 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( reserved5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . reserved6 as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( reserved6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . reserved7 as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( reserved7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . reserved8 as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( reserved8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . reserved9 as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( reserved9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . reserved10 as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( reserved10 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . reserved11 as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( reserved11 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . reserved12 as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( reserved12 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . reserved13 as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( reserved13 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . reserved14 as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( reserved14 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiHeapCallbacks > ( ) ) ) . reserved15 as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiHeapCallbacks ) , "::" , stringify ! ( reserved15 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiClassDefinition { pub klass : jclass , pub class_byte_count : jint , pub class_bytes : * const :: std :: os :: raw :: c_uchar , } # [ test ] fn bindgen_test_layout__jvmtiClassDefinition ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiClassDefinition > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _jvmtiClassDefinition ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiClassDefinition > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiClassDefinition ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiClassDefinition > ( ) ) ) . klass as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiClassDefinition ) , "::" , stringify ! ( klass ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiClassDefinition > ( ) ) ) . class_byte_count as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiClassDefinition ) , "::" , stringify ! ( class_byte_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiClassDefinition > ( ) ) ) . class_bytes as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiClassDefinition ) , "::" , stringify ! ( class_bytes ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiMonitorUsage { pub owner : jthread , pub entry_count : jint , pub waiter_count : jint , pub waiters : * mut jthread , pub notify_waiter_count : jint , pub notify_waiters : * mut jthread , } # [ test ] fn bindgen_test_layout__jvmtiMonitorUsage ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiMonitorUsage > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( _jvmtiMonitorUsage ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiMonitorUsage > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiMonitorUsage ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiMonitorUsage > ( ) ) ) . owner as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiMonitorUsage ) , "::" , stringify ! ( owner ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiMonitorUsage > ( ) ) ) . entry_count as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiMonitorUsage ) , "::" , stringify ! ( entry_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiMonitorUsage > ( ) ) ) . waiter_count as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiMonitorUsage ) , "::" , stringify ! ( waiter_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiMonitorUsage > ( ) ) ) . waiters as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiMonitorUsage ) , "::" , stringify ! ( waiters ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiMonitorUsage > ( ) ) ) . notify_waiter_count as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiMonitorUsage ) , "::" , stringify ! ( notify_waiter_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiMonitorUsage > ( ) ) ) . notify_waiters as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiMonitorUsage ) , "::" , stringify ! ( notify_waiters ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiLineNumberEntry { pub start_location : jlocation , pub line_number : jint , } # [ test ] fn bindgen_test_layout__jvmtiLineNumberEntry ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiLineNumberEntry > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _jvmtiLineNumberEntry ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiLineNumberEntry > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiLineNumberEntry ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiLineNumberEntry > ( ) ) ) . start_location as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiLineNumberEntry ) , "::" , stringify ! ( start_location ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiLineNumberEntry > ( ) ) ) . line_number as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiLineNumberEntry ) , "::" , stringify ! ( line_number ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiLocalVariableEntry { pub start_location : jlocation , pub length : jint , pub name : * mut :: std :: os :: raw :: c_char , pub signature : * mut :: std :: os :: raw :: c_char , pub generic_signature : * mut :: std :: os :: raw :: c_char , pub slot : jint , } # [ test ] fn bindgen_test_layout__jvmtiLocalVariableEntry ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiLocalVariableEntry > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( _jvmtiLocalVariableEntry ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiLocalVariableEntry > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiLocalVariableEntry ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiLocalVariableEntry > ( ) ) ) . start_location as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiLocalVariableEntry ) , "::" , stringify ! ( start_location ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiLocalVariableEntry > ( ) ) ) . length as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiLocalVariableEntry ) , "::" , stringify ! ( length ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiLocalVariableEntry > ( ) ) ) . name as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiLocalVariableEntry ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiLocalVariableEntry > ( ) ) ) . signature as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiLocalVariableEntry ) , "::" , stringify ! ( signature ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiLocalVariableEntry > ( ) ) ) . generic_signature as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiLocalVariableEntry ) , "::" , stringify ! ( generic_signature ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiLocalVariableEntry > ( ) ) ) . slot as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiLocalVariableEntry ) , "::" , stringify ! ( slot ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiParamInfo { pub name : * mut :: std :: os :: raw :: c_char , pub kind : jvmtiParamKind , pub base_type : jvmtiParamTypes , pub null_ok : jboolean , } # [ test ] fn bindgen_test_layout__jvmtiParamInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiParamInfo > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _jvmtiParamInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiParamInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiParamInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiParamInfo > ( ) ) ) . name as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiParamInfo ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiParamInfo > ( ) ) ) . kind as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiParamInfo ) , "::" , stringify ! ( kind ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiParamInfo > ( ) ) ) . base_type as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiParamInfo ) , "::" , stringify ! ( base_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiParamInfo > ( ) ) ) . null_ok as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiParamInfo ) , "::" , stringify ! ( null_ok ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiExtensionFunctionInfo { pub func : jvmtiExtensionFunction , pub id : * mut :: std :: os :: raw :: c_char , pub short_description : * mut :: std :: os :: raw :: c_char , pub param_count : jint , pub params : * mut jvmtiParamInfo , pub error_count : jint , pub errors : * mut jvmtiError , } # [ test ] fn bindgen_test_layout__jvmtiExtensionFunctionInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiExtensionFunctionInfo > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( _jvmtiExtensionFunctionInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiExtensionFunctionInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiExtensionFunctionInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiExtensionFunctionInfo > ( ) ) ) . func as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiExtensionFunctionInfo ) , "::" , stringify ! ( func ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiExtensionFunctionInfo > ( ) ) ) . id as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiExtensionFunctionInfo ) , "::" , stringify ! ( id ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiExtensionFunctionInfo > ( ) ) ) . short_description as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiExtensionFunctionInfo ) , "::" , stringify ! ( short_description ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiExtensionFunctionInfo > ( ) ) ) . param_count as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiExtensionFunctionInfo ) , "::" , stringify ! ( param_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiExtensionFunctionInfo > ( ) ) ) . params as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiExtensionFunctionInfo ) , "::" , stringify ! ( params ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiExtensionFunctionInfo > ( ) ) ) . error_count as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiExtensionFunctionInfo ) , "::" , stringify ! ( error_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiExtensionFunctionInfo > ( ) ) ) . errors as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiExtensionFunctionInfo ) , "::" , stringify ! ( errors ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiExtensionEventInfo { pub extension_event_index : jint , pub id : * mut :: std :: os :: raw :: c_char , pub short_description : * mut :: std :: os :: raw :: c_char , pub param_count : jint , pub params : * mut jvmtiParamInfo , } # [ test ] fn bindgen_test_layout__jvmtiExtensionEventInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiExtensionEventInfo > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( _jvmtiExtensionEventInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiExtensionEventInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiExtensionEventInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiExtensionEventInfo > ( ) ) ) . extension_event_index as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiExtensionEventInfo ) , "::" , stringify ! ( extension_event_index ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiExtensionEventInfo > ( ) ) ) . id as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiExtensionEventInfo ) , "::" , stringify ! ( id ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiExtensionEventInfo > ( ) ) ) . short_description as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiExtensionEventInfo ) , "::" , stringify ! ( short_description ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiExtensionEventInfo > ( ) ) ) . param_count as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiExtensionEventInfo ) , "::" , stringify ! ( param_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiExtensionEventInfo > ( ) ) ) . params as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiExtensionEventInfo ) , "::" , stringify ! ( params ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiTimerInfo { pub max_value : jlong , pub may_skip_forward : jboolean , pub may_skip_backward : jboolean , pub kind : jvmtiTimerKind , pub reserved1 : jlong , pub reserved2 : jlong , } # [ test ] fn bindgen_test_layout__jvmtiTimerInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiTimerInfo > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _jvmtiTimerInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiTimerInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiTimerInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiTimerInfo > ( ) ) ) . max_value as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiTimerInfo ) , "::" , stringify ! ( max_value ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiTimerInfo > ( ) ) ) . may_skip_forward as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiTimerInfo ) , "::" , stringify ! ( may_skip_forward ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiTimerInfo > ( ) ) ) . may_skip_backward as * const _ as usize } , 9usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiTimerInfo ) , "::" , stringify ! ( may_skip_backward ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiTimerInfo > ( ) ) ) . kind as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiTimerInfo ) , "::" , stringify ! ( kind ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiTimerInfo > ( ) ) ) . reserved1 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiTimerInfo ) , "::" , stringify ! ( reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiTimerInfo > ( ) ) ) . reserved2 as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiTimerInfo ) , "::" , stringify ! ( reserved2 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiAddrLocationMap { pub start_address : * const :: std :: os :: raw :: c_void , pub location : jlocation , } # [ test ] fn bindgen_test_layout__jvmtiAddrLocationMap ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiAddrLocationMap > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _jvmtiAddrLocationMap ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiAddrLocationMap > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiAddrLocationMap ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiAddrLocationMap > ( ) ) ) . start_address as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiAddrLocationMap ) , "::" , stringify ! ( start_address ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiAddrLocationMap > ( ) ) ) . location as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiAddrLocationMap ) , "::" , stringify ! ( location ) ) ) ; } # [ repr ( C ) ] # [ repr ( align ( 4 ) ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct jvmtiCapabilities { pub _bitfield_1 : __BindgenBitfieldUnit < [ u8 ; 16usize ] , u8 > , } # [ test ] fn bindgen_test_layout_jvmtiCapabilities ( ) { assert_eq ! ( :: std :: mem :: size_of :: < jvmtiCapabilities > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( jvmtiCapabilities ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < jvmtiCapabilities > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( jvmtiCapabilities ) ) ) ; } impl jvmtiCapabilities { # [ inline ] pub fn can_tag_objects ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 0usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_tag_objects ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 0usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_field_modification_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 1usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_field_modification_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 1usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_field_access_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 2usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_field_access_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 2usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_get_bytecodes ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 3usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_get_bytecodes ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 3usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_get_synthetic_attribute ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 4usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_get_synthetic_attribute ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 4usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_get_owned_monitor_info ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 5usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_get_owned_monitor_info ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 5usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_get_current_contended_monitor ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 6usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_get_current_contended_monitor ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 6usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_get_monitor_info ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 7usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_get_monitor_info ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 7usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_pop_frame ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 8usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_pop_frame ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 8usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_redefine_classes ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 9usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_redefine_classes ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 9usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_signal_thread ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 10usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_signal_thread ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 10usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_get_source_file_name ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 11usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_get_source_file_name ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 11usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_get_line_numbers ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 12usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_get_line_numbers ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 12usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_get_source_debug_extension ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 13usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_get_source_debug_extension ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 13usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_access_local_variables ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 14usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_access_local_variables ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 14usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_maintain_original_method_order ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 15usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_maintain_original_method_order ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 15usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_single_step_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 16usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_single_step_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 16usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_exception_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 17usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_exception_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 17usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_frame_pop_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 18usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_frame_pop_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 18usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_breakpoint_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 19usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_breakpoint_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 19usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_suspend ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 20usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_suspend ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 20usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_redefine_any_class ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 21usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_redefine_any_class ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 21usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_get_current_thread_cpu_time ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 22usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_get_current_thread_cpu_time ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 22usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_get_thread_cpu_time ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 23usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_get_thread_cpu_time ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 23usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_method_entry_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 24usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_method_entry_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 24usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_method_exit_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 25usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_method_exit_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 25usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_all_class_hook_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 26usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_all_class_hook_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 26usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_compiled_method_load_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 27usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_compiled_method_load_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 27usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_monitor_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 28usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_monitor_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 28usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_vm_object_alloc_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 29usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_vm_object_alloc_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 29usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_native_method_bind_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 30usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_native_method_bind_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 30usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_garbage_collection_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 31usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_garbage_collection_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 31usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_object_free_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 32usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_object_free_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 32usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_force_early_return ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 33usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_force_early_return ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 33usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_get_owned_monitor_stack_depth_info ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 34usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_get_owned_monitor_stack_depth_info ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 34usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_get_constant_pool ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 35usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_get_constant_pool ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 35usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_set_native_method_prefix ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 36usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_set_native_method_prefix ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 36usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_retransform_classes ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 37usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_retransform_classes ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 37usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_retransform_any_class ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 38usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_retransform_any_class ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 38usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_resource_exhaustion_heap_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 39usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_resource_exhaustion_heap_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 39usize , 1u8 , val as u64 ) } } # [ inline ] pub fn can_generate_resource_exhaustion_threads_events ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 40usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_can_generate_resource_exhaustion_threads_events ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 40usize , 1u8 , val as u64 ) } } # [ inline ] pub fn new_bitfield_1 ( can_tag_objects : :: std :: os :: raw :: c_uint , can_generate_field_modification_events : :: std :: os :: raw :: c_uint , can_generate_field_access_events : :: std :: os :: raw :: c_uint , can_get_bytecodes : :: std :: os :: raw :: c_uint , can_get_synthetic_attribute : :: std :: os :: raw :: c_uint , can_get_owned_monitor_info : :: std :: os :: raw :: c_uint , can_get_current_contended_monitor : :: std :: os :: raw :: c_uint , can_get_monitor_info : :: std :: os :: raw :: c_uint , can_pop_frame : :: std :: os :: raw :: c_uint , can_redefine_classes : :: std :: os :: raw :: c_uint , can_signal_thread : :: std :: os :: raw :: c_uint , can_get_source_file_name : :: std :: os :: raw :: c_uint , can_get_line_numbers : :: std :: os :: raw :: c_uint , can_get_source_debug_extension : :: std :: os :: raw :: c_uint , can_access_local_variables : :: std :: os :: raw :: c_uint , can_maintain_original_method_order : :: std :: os :: raw :: c_uint , can_generate_single_step_events : :: std :: os :: raw :: c_uint , can_generate_exception_events : :: std :: os :: raw :: c_uint , can_generate_frame_pop_events : :: std :: os :: raw :: c_uint , can_generate_breakpoint_events : :: std :: os :: raw :: c_uint , can_suspend : :: std :: os :: raw :: c_uint , can_redefine_any_class : :: std :: os :: raw :: c_uint , can_get_current_thread_cpu_time : :: std :: os :: raw :: c_uint , can_get_thread_cpu_time : :: std :: os :: raw :: c_uint , can_generate_method_entry_events : :: std :: os :: raw :: c_uint , can_generate_method_exit_events : :: std :: os :: raw :: c_uint , can_generate_all_class_hook_events : :: std :: os :: raw :: c_uint , can_generate_compiled_method_load_events : :: std :: os :: raw :: c_uint , can_generate_monitor_events : :: std :: os :: raw :: c_uint , can_generate_vm_object_alloc_events : :: std :: os :: raw :: c_uint , can_generate_native_method_bind_events : :: std :: os :: raw :: c_uint , can_generate_garbage_collection_events : :: std :: os :: raw :: c_uint , can_generate_object_free_events : :: std :: os :: raw :: c_uint , can_force_early_return : :: std :: os :: raw :: c_uint , can_get_owned_monitor_stack_depth_info : :: std :: os :: raw :: c_uint , can_get_constant_pool : :: std :: os :: raw :: c_uint , can_set_native_method_prefix : :: std :: os :: raw :: c_uint , can_retransform_classes : :: std :: os :: raw :: c_uint , can_retransform_any_class : :: std :: os :: raw :: c_uint , can_generate_resource_exhaustion_heap_events : :: std :: os :: raw :: c_uint , can_generate_resource_exhaustion_threads_events : :: std :: os :: raw :: c_uint ) -> __BindgenBitfieldUnit < [ u8 ; 16usize ] , u8 > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [ u8 ; 16usize ] , u8 > = Default :: default ( ) ; __bindgen_bitfield_unit . set ( 0usize , 1u8 , { let can_tag_objects : u32 = unsafe { :: std :: mem :: transmute ( can_tag_objects ) } ; can_tag_objects as u64 } ) ; __bindgen_bitfield_unit . set ( 1usize , 1u8 , { let can_generate_field_modification_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_field_modification_events ) } ; can_generate_field_modification_events as u64 } ) ; __bindgen_bitfield_unit . set ( 2usize , 1u8 , { let can_generate_field_access_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_field_access_events ) } ; can_generate_field_access_events as u64 } ) ; __bindgen_bitfield_unit . set ( 3usize , 1u8 , { let can_get_bytecodes : u32 = unsafe { :: std :: mem :: transmute ( can_get_bytecodes ) } ; can_get_bytecodes as u64 } ) ; __bindgen_bitfield_unit . set ( 4usize , 1u8 , { let can_get_synthetic_attribute : u32 = unsafe { :: std :: mem :: transmute ( can_get_synthetic_attribute ) } ; can_get_synthetic_attribute as u64 } ) ; __bindgen_bitfield_unit . set ( 5usize , 1u8 , { let can_get_owned_monitor_info : u32 = unsafe { :: std :: mem :: transmute ( can_get_owned_monitor_info ) } ; can_get_owned_monitor_info as u64 } ) ; __bindgen_bitfield_unit . set ( 6usize , 1u8 , { let can_get_current_contended_monitor : u32 = unsafe { :: std :: mem :: transmute ( can_get_current_contended_monitor ) } ; can_get_current_contended_monitor as u64 } ) ; __bindgen_bitfield_unit . set ( 7usize , 1u8 , { let can_get_monitor_info : u32 = unsafe { :: std :: mem :: transmute ( can_get_monitor_info ) } ; can_get_monitor_info as u64 } ) ; __bindgen_bitfield_unit . set ( 8usize , 1u8 , { let can_pop_frame : u32 = unsafe { :: std :: mem :: transmute ( can_pop_frame ) } ; can_pop_frame as u64 } ) ; __bindgen_bitfield_unit . set ( 9usize , 1u8 , { let can_redefine_classes : u32 = unsafe { :: std :: mem :: transmute ( can_redefine_classes ) } ; can_redefine_classes as u64 } ) ; __bindgen_bitfield_unit . set ( 10usize , 1u8 , { let can_signal_thread : u32 = unsafe { :: std :: mem :: transmute ( can_signal_thread ) } ; can_signal_thread as u64 } ) ; __bindgen_bitfield_unit . set ( 11usize , 1u8 , { let can_get_source_file_name : u32 = unsafe { :: std :: mem :: transmute ( can_get_source_file_name ) } ; can_get_source_file_name as u64 } ) ; __bindgen_bitfield_unit . set ( 12usize , 1u8 , { let can_get_line_numbers : u32 = unsafe { :: std :: mem :: transmute ( can_get_line_numbers ) } ; can_get_line_numbers as u64 } ) ; __bindgen_bitfield_unit . set ( 13usize , 1u8 , { let can_get_source_debug_extension : u32 = unsafe { :: std :: mem :: transmute ( can_get_source_debug_extension ) } ; can_get_source_debug_extension as u64 } ) ; __bindgen_bitfield_unit . set ( 14usize , 1u8 , { let can_access_local_variables : u32 = unsafe { :: std :: mem :: transmute ( can_access_local_variables ) } ; can_access_local_variables as u64 } ) ; __bindgen_bitfield_unit . set ( 15usize , 1u8 , { let can_maintain_original_method_order : u32 = unsafe { :: std :: mem :: transmute ( can_maintain_original_method_order ) } ; can_maintain_original_method_order as u64 } ) ; __bindgen_bitfield_unit . set ( 16usize , 1u8 , { let can_generate_single_step_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_single_step_events ) } ; can_generate_single_step_events as u64 } ) ; __bindgen_bitfield_unit . set ( 17usize , 1u8 , { let can_generate_exception_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_exception_events ) } ; can_generate_exception_events as u64 } ) ; __bindgen_bitfield_unit . set ( 18usize , 1u8 , { let can_generate_frame_pop_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_frame_pop_events ) } ; can_generate_frame_pop_events as u64 } ) ; __bindgen_bitfield_unit . set ( 19usize , 1u8 , { let can_generate_breakpoint_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_breakpoint_events ) } ; can_generate_breakpoint_events as u64 } ) ; __bindgen_bitfield_unit . set ( 20usize , 1u8 , { let can_suspend : u32 = unsafe { :: std :: mem :: transmute ( can_suspend ) } ; can_suspend as u64 } ) ; __bindgen_bitfield_unit . set ( 21usize , 1u8 , { let can_redefine_any_class : u32 = unsafe { :: std :: mem :: transmute ( can_redefine_any_class ) } ; can_redefine_any_class as u64 } ) ; __bindgen_bitfield_unit . set ( 22usize , 1u8 , { let can_get_current_thread_cpu_time : u32 = unsafe { :: std :: mem :: transmute ( can_get_current_thread_cpu_time ) } ; can_get_current_thread_cpu_time as u64 } ) ; __bindgen_bitfield_unit . set ( 23usize , 1u8 , { let can_get_thread_cpu_time : u32 = unsafe { :: std :: mem :: transmute ( can_get_thread_cpu_time ) } ; can_get_thread_cpu_time as u64 } ) ; __bindgen_bitfield_unit . set ( 24usize , 1u8 , { let can_generate_method_entry_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_method_entry_events ) } ; can_generate_method_entry_events as u64 } ) ; __bindgen_bitfield_unit . set ( 25usize , 1u8 , { let can_generate_method_exit_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_method_exit_events ) } ; can_generate_method_exit_events as u64 } ) ; __bindgen_bitfield_unit . set ( 26usize , 1u8 , { let can_generate_all_class_hook_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_all_class_hook_events ) } ; can_generate_all_class_hook_events as u64 } ) ; __bindgen_bitfield_unit . set ( 27usize , 1u8 , { let can_generate_compiled_method_load_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_compiled_method_load_events ) } ; can_generate_compiled_method_load_events as u64 } ) ; __bindgen_bitfield_unit . set ( 28usize , 1u8 , { let can_generate_monitor_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_monitor_events ) } ; can_generate_monitor_events as u64 } ) ; __bindgen_bitfield_unit . set ( 29usize , 1u8 , { let can_generate_vm_object_alloc_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_vm_object_alloc_events ) } ; can_generate_vm_object_alloc_events as u64 } ) ; __bindgen_bitfield_unit . set ( 30usize , 1u8 , { let can_generate_native_method_bind_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_native_method_bind_events ) } ; can_generate_native_method_bind_events as u64 } ) ; __bindgen_bitfield_unit . set ( 31usize , 1u8 , { let can_generate_garbage_collection_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_garbage_collection_events ) } ; can_generate_garbage_collection_events as u64 } ) ; __bindgen_bitfield_unit . set ( 32usize , 1u8 , { let can_generate_object_free_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_object_free_events ) } ; can_generate_object_free_events as u64 } ) ; __bindgen_bitfield_unit . set ( 33usize , 1u8 , { let can_force_early_return : u32 = unsafe { :: std :: mem :: transmute ( can_force_early_return ) } ; can_force_early_return as u64 } ) ; __bindgen_bitfield_unit . set ( 34usize , 1u8 , { let can_get_owned_monitor_stack_depth_info : u32 = unsafe { :: std :: mem :: transmute ( can_get_owned_monitor_stack_depth_info ) } ; can_get_owned_monitor_stack_depth_info as u64 } ) ; __bindgen_bitfield_unit . set ( 35usize , 1u8 , { let can_get_constant_pool : u32 = unsafe { :: std :: mem :: transmute ( can_get_constant_pool ) } ; can_get_constant_pool as u64 } ) ; __bindgen_bitfield_unit . set ( 36usize , 1u8 , { let can_set_native_method_prefix : u32 = unsafe { :: std :: mem :: transmute ( can_set_native_method_prefix ) } ; can_set_native_method_prefix as u64 } ) ; __bindgen_bitfield_unit . set ( 37usize , 1u8 , { let can_retransform_classes : u32 = unsafe { :: std :: mem :: transmute ( can_retransform_classes ) } ; can_retransform_classes as u64 } ) ; __bindgen_bitfield_unit . set ( 38usize , 1u8 , { let can_retransform_any_class : u32 = unsafe { :: std :: mem :: transmute ( can_retransform_any_class ) } ; can_retransform_any_class as u64 } ) ; __bindgen_bitfield_unit . set ( 39usize , 1u8 , { let can_generate_resource_exhaustion_heap_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_resource_exhaustion_heap_events ) } ; can_generate_resource_exhaustion_heap_events as u64 } ) ; __bindgen_bitfield_unit . set ( 40usize , 1u8 , { let can_generate_resource_exhaustion_threads_events : u32 = unsafe { :: std :: mem :: transmute ( can_generate_resource_exhaustion_threads_events ) } ; can_generate_resource_exhaustion_threads_events as u64 } ) ; __bindgen_bitfield_unit } } pub type jvmtiEventReserved = :: std :: option :: Option < unsafe extern "C" fn ( ) > ; pub type jvmtiEventBreakpoint = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , method : jmethodID , location : jlocation ) > ; pub type jvmtiEventClassFileLoadHook = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , class_being_redefined : jclass , loader : jobject , name : * const :: std :: os :: raw :: c_char , protection_domain : jobject , class_data_len : jint , class_data : * const :: std :: os :: raw :: c_uchar , new_class_data_len : * mut jint , new_class_data : * mut * mut :: std :: os :: raw :: c_uchar ) > ; pub type jvmtiEventClassLoad = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , klass : jclass ) > ; pub type jvmtiEventClassPrepare = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , klass : jclass ) > ; pub type jvmtiEventCompiledMethodLoad = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , method : jmethodID , code_size : jint , code_addr : * const :: std :: os :: raw :: c_void , map_length : jint , map : * const jvmtiAddrLocationMap , compile_info : * const :: std :: os :: raw :: c_void ) > ; pub type jvmtiEventCompiledMethodUnload = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , method : jmethodID , code_addr : * const :: std :: os :: raw :: c_void ) > ; pub type jvmtiEventDataDumpRequest = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv ) > ; pub type jvmtiEventDynamicCodeGenerated = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , name : * const :: std :: os :: raw :: c_char , address : * const :: std :: os :: raw :: c_void , length : jint ) > ; pub type jvmtiEventException = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , method : jmethodID , location : jlocation , exception : jobject , catch_method : jmethodID , catch_location : jlocation ) > ; pub type jvmtiEventExceptionCatch = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , method : jmethodID , location : jlocation , exception : jobject ) > ; pub type jvmtiEventFieldAccess = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , method : jmethodID , location : jlocation , field_klass : jclass , object : jobject , field : jfieldID ) > ; pub type jvmtiEventFieldModification = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , method : jmethodID , location : jlocation , field_klass : jclass , object : jobject , field : jfieldID , signature_type : :: std :: os :: raw :: c_char , new_value : jvalue ) > ; pub type jvmtiEventFramePop = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , method : jmethodID , was_popped_by_exception : jboolean ) > ; pub type jvmtiEventGarbageCollectionFinish = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv ) > ; pub type jvmtiEventGarbageCollectionStart = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv ) > ; pub type jvmtiEventMethodEntry = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , method : jmethodID ) > ; pub type jvmtiEventMethodExit = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , method : jmethodID , was_popped_by_exception : jboolean , return_value : jvalue ) > ; pub type jvmtiEventMonitorContendedEnter = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , object : jobject ) > ; pub type jvmtiEventMonitorContendedEntered = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , object : jobject ) > ; pub type jvmtiEventMonitorWait = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , object : jobject , timeout : jlong ) > ; pub type jvmtiEventMonitorWaited = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , object : jobject , timed_out : jboolean ) > ; pub type jvmtiEventNativeMethodBind = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , method : jmethodID , address : * mut :: std :: os :: raw :: c_void , new_address_ptr : * mut * mut :: std :: os :: raw :: c_void ) > ; pub type jvmtiEventObjectFree = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , tag : jlong ) > ; pub type jvmtiEventResourceExhausted = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , flags : jint , reserved : * const :: std :: os :: raw :: c_void , description : * const :: std :: os :: raw :: c_char ) > ; pub type jvmtiEventSingleStep = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , method : jmethodID , location : jlocation ) > ; pub type jvmtiEventThreadEnd = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread ) > ; pub type jvmtiEventThreadStart = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread ) > ; pub type jvmtiEventVMDeath = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv ) > ; pub type jvmtiEventVMInit = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread ) > ; pub type jvmtiEventVMObjectAlloc = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv , thread : jthread , object : jobject , object_klass : jclass , size : jlong ) > ; pub type jvmtiEventVMStart = :: std :: option :: Option < unsafe extern "C" fn ( jvmti_env : * mut jvmtiEnv , jni_env : * mut JNIEnv ) > ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct jvmtiEventCallbacks { pub VMInit : jvmtiEventVMInit , pub VMDeath : jvmtiEventVMDeath , pub ThreadStart : jvmtiEventThreadStart , pub ThreadEnd : jvmtiEventThreadEnd , pub ClassFileLoadHook : jvmtiEventClassFileLoadHook , pub ClassLoad : jvmtiEventClassLoad , pub ClassPrepare : jvmtiEventClassPrepare , pub VMStart : jvmtiEventVMStart , pub Exception : jvmtiEventException , pub ExceptionCatch : jvmtiEventExceptionCatch , pub SingleStep : jvmtiEventSingleStep , pub FramePop : jvmtiEventFramePop , pub Breakpoint : jvmtiEventBreakpoint , pub FieldAccess : jvmtiEventFieldAccess , pub FieldModification : jvmtiEventFieldModification , pub MethodEntry : jvmtiEventMethodEntry , pub MethodExit : jvmtiEventMethodExit , pub NativeMethodBind : jvmtiEventNativeMethodBind , pub CompiledMethodLoad : jvmtiEventCompiledMethodLoad , pub CompiledMethodUnload : jvmtiEventCompiledMethodUnload , pub DynamicCodeGenerated : jvmtiEventDynamicCodeGenerated , pub DataDumpRequest : jvmtiEventDataDumpRequest , pub reserved72 : jvmtiEventReserved , pub MonitorWait : jvmtiEventMonitorWait , pub MonitorWaited : jvmtiEventMonitorWaited , pub MonitorContendedEnter : jvmtiEventMonitorContendedEnter , pub MonitorContendedEntered : jvmtiEventMonitorContendedEntered , pub reserved77 : jvmtiEventReserved , pub reserved78 : jvmtiEventReserved , pub reserved79 : jvmtiEventReserved , pub ResourceExhausted : jvmtiEventResourceExhausted , pub GarbageCollectionStart : jvmtiEventGarbageCollectionStart , pub GarbageCollectionFinish : jvmtiEventGarbageCollectionFinish , pub ObjectFree : jvmtiEventObjectFree , pub VMObjectAlloc : jvmtiEventVMObjectAlloc , } # [ test ] fn bindgen_test_layout_jvmtiEventCallbacks ( ) { assert_eq ! ( :: std :: mem :: size_of :: < jvmtiEventCallbacks > ( ) , 280usize , concat ! ( "Size of: " , stringify ! ( jvmtiEventCallbacks ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < jvmtiEventCallbacks > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( jvmtiEventCallbacks ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . VMInit as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( VMInit ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . VMDeath as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( VMDeath ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . ThreadStart as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( ThreadStart ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . ThreadEnd as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( ThreadEnd ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . ClassFileLoadHook as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( ClassFileLoadHook ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . ClassLoad as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( ClassLoad ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . ClassPrepare as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( ClassPrepare ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . VMStart as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( VMStart ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . Exception as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( Exception ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . ExceptionCatch as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( ExceptionCatch ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . SingleStep as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( SingleStep ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . FramePop as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( FramePop ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . Breakpoint as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( Breakpoint ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . FieldAccess as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( FieldAccess ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . FieldModification as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( FieldModification ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . MethodEntry as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( MethodEntry ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . MethodExit as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( MethodExit ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . NativeMethodBind as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( NativeMethodBind ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . CompiledMethodLoad as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( CompiledMethodLoad ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . CompiledMethodUnload as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( CompiledMethodUnload ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . DynamicCodeGenerated as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( DynamicCodeGenerated ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . DataDumpRequest as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( DataDumpRequest ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . reserved72 as * const _ as usize } , 176usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( reserved72 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . MonitorWait as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( MonitorWait ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . MonitorWaited as * const _ as usize } , 192usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( MonitorWaited ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . MonitorContendedEnter as * const _ as usize } , 200usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( MonitorContendedEnter ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . MonitorContendedEntered as * const _ as usize } , 208usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( MonitorContendedEntered ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . reserved77 as * const _ as usize } , 216usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( reserved77 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . reserved78 as * const _ as usize } , 224usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( reserved78 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . reserved79 as * const _ as usize } , 232usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( reserved79 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . ResourceExhausted as * const _ as usize } , 240usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( ResourceExhausted ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . GarbageCollectionStart as * const _ as usize } , 248usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( GarbageCollectionStart ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . GarbageCollectionFinish as * const _ as usize } , 256usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( GarbageCollectionFinish ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . ObjectFree as * const _ as usize } , 264usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( ObjectFree ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiEventCallbacks > ( ) ) ) . VMObjectAlloc as * const _ as usize } , 272usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiEventCallbacks ) , "::" , stringify ! ( VMObjectAlloc ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct jvmtiInterface_1_ { pub reserved1 : * mut :: std :: os :: raw :: c_void , pub SetEventNotificationMode : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , mode : jvmtiEventMode , event_type : jvmtiEvent , event_thread : jthread , ... ) -> jvmtiError > , pub reserved3 : * mut :: std :: os :: raw :: c_void , pub GetAllThreads : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , threads_count_ptr : * mut jint , threads_ptr : * mut * mut jthread ) -> jvmtiError > , pub SuspendThread : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread ) -> jvmtiError > , pub ResumeThread : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread ) -> jvmtiError > , pub StopThread : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , exception : jobject ) -> jvmtiError > , pub InterruptThread : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread ) -> jvmtiError > , pub GetThreadInfo : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , info_ptr : * mut jvmtiThreadInfo ) -> jvmtiError > , pub GetOwnedMonitorInfo : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , owned_monitor_count_ptr : * mut jint , owned_monitors_ptr : * mut * mut jobject ) -> jvmtiError > , pub GetCurrentContendedMonitor : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , monitor_ptr : * mut jobject ) -> jvmtiError > , pub RunAgentThread : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , proc_ : jvmtiStartFunction , arg : * const :: std :: os :: raw :: c_void , priority : jint ) -> jvmtiError > , pub GetTopThreadGroups : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , group_count_ptr : * mut jint , groups_ptr : * mut * mut jthreadGroup ) -> jvmtiError > , pub GetThreadGroupInfo : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , group : jthreadGroup , info_ptr : * mut jvmtiThreadGroupInfo ) -> jvmtiError > , pub GetThreadGroupChildren : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , group : jthreadGroup , thread_count_ptr : * mut jint , threads_ptr : * mut * mut jthread , group_count_ptr : * mut jint , groups_ptr : * mut * mut jthreadGroup ) -> jvmtiError > , pub GetFrameCount : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , count_ptr : * mut jint ) -> jvmtiError > , pub GetThreadState : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , thread_state_ptr : * mut jint ) -> jvmtiError > , pub GetCurrentThread : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread_ptr : * mut jthread ) -> jvmtiError > , pub GetFrameLocation : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint , method_ptr : * mut jmethodID , location_ptr : * mut jlocation ) -> jvmtiError > , pub NotifyFramePop : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint ) -> jvmtiError > , pub GetLocalObject : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint , slot : jint , value_ptr : * mut jobject ) -> jvmtiError > , pub GetLocalInt : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint , slot : jint , value_ptr : * mut jint ) -> jvmtiError > , pub GetLocalLong : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint , slot : jint , value_ptr : * mut jlong ) -> jvmtiError > , pub GetLocalFloat : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint , slot : jint , value_ptr : * mut jfloat ) -> jvmtiError > , pub GetLocalDouble : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint , slot : jint , value_ptr : * mut jdouble ) -> jvmtiError > , pub SetLocalObject : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint , slot : jint , value : jobject ) -> jvmtiError > , pub SetLocalInt : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint , slot : jint , value : jint ) -> jvmtiError > , pub SetLocalLong : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint , slot : jint , value : jlong ) -> jvmtiError > , pub SetLocalFloat : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint , slot : jint , value : jfloat ) -> jvmtiError > , pub SetLocalDouble : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint , slot : jint , value : jdouble ) -> jvmtiError > , pub CreateRawMonitor : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , name : * const :: std :: os :: raw :: c_char , monitor_ptr : * mut jrawMonitorID ) -> jvmtiError > , pub DestroyRawMonitor : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , monitor : jrawMonitorID ) -> jvmtiError > , pub RawMonitorEnter : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , monitor : jrawMonitorID ) -> jvmtiError > , pub RawMonitorExit : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , monitor : jrawMonitorID ) -> jvmtiError > , pub RawMonitorWait : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , monitor : jrawMonitorID , millis : jlong ) -> jvmtiError > , pub RawMonitorNotify : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , monitor : jrawMonitorID ) -> jvmtiError > , pub RawMonitorNotifyAll : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , monitor : jrawMonitorID ) -> jvmtiError > , pub SetBreakpoint : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , location : jlocation ) -> jvmtiError > , pub ClearBreakpoint : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , location : jlocation ) -> jvmtiError > , pub reserved40 : * mut :: std :: os :: raw :: c_void , pub SetFieldAccessWatch : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , field : jfieldID ) -> jvmtiError > , pub ClearFieldAccessWatch : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , field : jfieldID ) -> jvmtiError > , pub SetFieldModificationWatch : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , field : jfieldID ) -> jvmtiError > , pub ClearFieldModificationWatch : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , field : jfieldID ) -> jvmtiError > , pub IsModifiableClass : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , is_modifiable_class_ptr : * mut jboolean ) -> jvmtiError > , pub Allocate : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , size : jlong , mem_ptr : * mut * mut :: std :: os :: raw :: c_uchar ) -> jvmtiError > , pub Deallocate : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , mem : * mut :: std :: os :: raw :: c_uchar ) -> jvmtiError > , pub GetClassSignature : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , signature_ptr : * mut * mut :: std :: os :: raw :: c_char , generic_ptr : * mut * mut :: std :: os :: raw :: c_char ) -> jvmtiError > , pub GetClassStatus : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , status_ptr : * mut jint ) -> jvmtiError > , pub GetSourceFileName : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , source_name_ptr : * mut * mut :: std :: os :: raw :: c_char ) -> jvmtiError > , pub GetClassModifiers : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , modifiers_ptr : * mut jint ) -> jvmtiError > , pub GetClassMethods : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , method_count_ptr : * mut jint , methods_ptr : * mut * mut jmethodID ) -> jvmtiError > , pub GetClassFields : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , field_count_ptr : * mut jint , fields_ptr : * mut * mut jfieldID ) -> jvmtiError > , pub GetImplementedInterfaces : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , interface_count_ptr : * mut jint , interfaces_ptr : * mut * mut jclass ) -> jvmtiError > , pub IsInterface : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , is_interface_ptr : * mut jboolean ) -> jvmtiError > , pub IsArrayClass : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , is_array_class_ptr : * mut jboolean ) -> jvmtiError > , pub GetClassLoader : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , classloader_ptr : * mut jobject ) -> jvmtiError > , pub GetObjectHashCode : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , object : jobject , hash_code_ptr : * mut jint ) -> jvmtiError > , pub GetObjectMonitorUsage : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , object : jobject , info_ptr : * mut jvmtiMonitorUsage ) -> jvmtiError > , pub GetFieldName : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , field : jfieldID , name_ptr : * mut * mut :: std :: os :: raw :: c_char , signature_ptr : * mut * mut :: std :: os :: raw :: c_char , generic_ptr : * mut * mut :: std :: os :: raw :: c_char ) -> jvmtiError > , pub GetFieldDeclaringClass : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , field : jfieldID , declaring_class_ptr : * mut jclass ) -> jvmtiError > , pub GetFieldModifiers : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , field : jfieldID , modifiers_ptr : * mut jint ) -> jvmtiError > , pub IsFieldSynthetic : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , field : jfieldID , is_synthetic_ptr : * mut jboolean ) -> jvmtiError > , pub GetMethodName : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , name_ptr : * mut * mut :: std :: os :: raw :: c_char , signature_ptr : * mut * mut :: std :: os :: raw :: c_char , generic_ptr : * mut * mut :: std :: os :: raw :: c_char ) -> jvmtiError > , pub GetMethodDeclaringClass : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , declaring_class_ptr : * mut jclass ) -> jvmtiError > , pub GetMethodModifiers : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , modifiers_ptr : * mut jint ) -> jvmtiError > , pub reserved67 : * mut :: std :: os :: raw :: c_void , pub GetMaxLocals : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , max_ptr : * mut jint ) -> jvmtiError > , pub GetArgumentsSize : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , size_ptr : * mut jint ) -> jvmtiError > , pub GetLineNumberTable : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , entry_count_ptr : * mut jint , table_ptr : * mut * mut jvmtiLineNumberEntry ) -> jvmtiError > , pub GetMethodLocation : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , start_location_ptr : * mut jlocation , end_location_ptr : * mut jlocation ) -> jvmtiError > , pub GetLocalVariableTable : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , entry_count_ptr : * mut jint , table_ptr : * mut * mut jvmtiLocalVariableEntry ) -> jvmtiError > , pub SetNativeMethodPrefix : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , prefix : * const :: std :: os :: raw :: c_char ) -> jvmtiError > , pub SetNativeMethodPrefixes : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , prefix_count : jint , prefixes : * mut * mut :: std :: os :: raw :: c_char ) -> jvmtiError > , pub GetBytecodes : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , bytecode_count_ptr : * mut jint , bytecodes_ptr : * mut * mut :: std :: os :: raw :: c_uchar ) -> jvmtiError > , pub IsMethodNative : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , is_native_ptr : * mut jboolean ) -> jvmtiError > , pub IsMethodSynthetic : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , is_synthetic_ptr : * mut jboolean ) -> jvmtiError > , pub GetLoadedClasses : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , class_count_ptr : * mut jint , classes_ptr : * mut * mut jclass ) -> jvmtiError > , pub GetClassLoaderClasses : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , initiating_loader : jobject , class_count_ptr : * mut jint , classes_ptr : * mut * mut jclass ) -> jvmtiError > , pub PopFrame : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread ) -> jvmtiError > , pub ForceEarlyReturnObject : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , value : jobject ) -> jvmtiError > , pub ForceEarlyReturnInt : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , value : jint ) -> jvmtiError > , pub ForceEarlyReturnLong : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , value : jlong ) -> jvmtiError > , pub ForceEarlyReturnFloat : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , value : jfloat ) -> jvmtiError > , pub ForceEarlyReturnDouble : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , value : jdouble ) -> jvmtiError > , pub ForceEarlyReturnVoid : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread ) -> jvmtiError > , pub RedefineClasses : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , class_count : jint , class_definitions : * const jvmtiClassDefinition ) -> jvmtiError > , pub GetVersionNumber : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , version_ptr : * mut jint ) -> jvmtiError > , pub GetCapabilities : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , capabilities_ptr : * mut jvmtiCapabilities ) -> jvmtiError > , pub GetSourceDebugExtension : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , source_debug_extension_ptr : * mut * mut :: std :: os :: raw :: c_char ) -> jvmtiError > , pub IsMethodObsolete : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , method : jmethodID , is_obsolete_ptr : * mut jboolean ) -> jvmtiError > , pub SuspendThreadList : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , request_count : jint , request_list : * const jthread , results : * mut jvmtiError ) -> jvmtiError > , pub ResumeThreadList : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , request_count : jint , request_list : * const jthread , results : * mut jvmtiError ) -> jvmtiError > , pub reserved94 : * mut :: std :: os :: raw :: c_void , pub reserved95 : * mut :: std :: os :: raw :: c_void , pub reserved96 : * mut :: std :: os :: raw :: c_void , pub reserved97 : * mut :: std :: os :: raw :: c_void , pub reserved98 : * mut :: std :: os :: raw :: c_void , pub reserved99 : * mut :: std :: os :: raw :: c_void , pub GetAllStackTraces : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , max_frame_count : jint , stack_info_ptr : * mut * mut jvmtiStackInfo , thread_count_ptr : * mut jint ) -> jvmtiError > , pub GetThreadListStackTraces : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread_count : jint , thread_list : * const jthread , max_frame_count : jint , stack_info_ptr : * mut * mut jvmtiStackInfo ) -> jvmtiError > , pub GetThreadLocalStorage : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , data_ptr : * mut * mut :: std :: os :: raw :: c_void ) -> jvmtiError > , pub SetThreadLocalStorage : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , data : * const :: std :: os :: raw :: c_void ) -> jvmtiError > , pub GetStackTrace : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , start_depth : jint , max_frame_count : jint , frame_buffer : * mut jvmtiFrameInfo , count_ptr : * mut jint ) -> jvmtiError > , pub reserved105 : * mut :: std :: os :: raw :: c_void , pub GetTag : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , object : jobject , tag_ptr : * mut jlong ) -> jvmtiError > , pub SetTag : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , object : jobject , tag : jlong ) -> jvmtiError > , pub ForceGarbageCollection : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv ) -> jvmtiError > , pub IterateOverObjectsReachableFromObject : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , object : jobject , object_reference_callback : jvmtiObjectReferenceCallback , user_data : * const :: std :: os :: raw :: c_void ) -> jvmtiError > , pub IterateOverReachableObjects : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , heap_root_callback : jvmtiHeapRootCallback , stack_ref_callback : jvmtiStackReferenceCallback , object_ref_callback : jvmtiObjectReferenceCallback , user_data : * const :: std :: os :: raw :: c_void ) -> jvmtiError > , pub IterateOverHeap : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , object_filter : jvmtiHeapObjectFilter , heap_object_callback : jvmtiHeapObjectCallback , user_data : * const :: std :: os :: raw :: c_void ) -> jvmtiError > , pub IterateOverInstancesOfClass : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , object_filter : jvmtiHeapObjectFilter , heap_object_callback : jvmtiHeapObjectCallback , user_data : * const :: std :: os :: raw :: c_void ) -> jvmtiError > , pub reserved113 : * mut :: std :: os :: raw :: c_void , pub GetObjectsWithTags : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , tag_count : jint , tags : * const jlong , count_ptr : * mut jint , object_result_ptr : * mut * mut jobject , tag_result_ptr : * mut * mut jlong ) -> jvmtiError > , pub FollowReferences : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , heap_filter : jint , klass : jclass , initial_object : jobject , callbacks : * const jvmtiHeapCallbacks , user_data : * const :: std :: os :: raw :: c_void ) -> jvmtiError > , pub IterateThroughHeap : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , heap_filter : jint , klass : jclass , callbacks : * const jvmtiHeapCallbacks , user_data : * const :: std :: os :: raw :: c_void ) -> jvmtiError > , pub reserved117 : * mut :: std :: os :: raw :: c_void , pub reserved118 : * mut :: std :: os :: raw :: c_void , pub reserved119 : * mut :: std :: os :: raw :: c_void , pub SetJNIFunctionTable : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , function_table : * const jniNativeInterface ) -> jvmtiError > , pub GetJNIFunctionTable : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , function_table : * mut * mut jniNativeInterface ) -> jvmtiError > , pub SetEventCallbacks : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , callbacks : * const jvmtiEventCallbacks , size_of_callbacks : jint ) -> jvmtiError > , pub GenerateEvents : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , event_type : jvmtiEvent ) -> jvmtiError > , pub GetExtensionFunctions : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , extension_count_ptr : * mut jint , extensions : * mut * mut jvmtiExtensionFunctionInfo ) -> jvmtiError > , pub GetExtensionEvents : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , extension_count_ptr : * mut jint , extensions : * mut * mut jvmtiExtensionEventInfo ) -> jvmtiError > , pub SetExtensionEventCallback : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , extension_event_index : jint , callback : jvmtiExtensionEvent ) -> jvmtiError > , pub DisposeEnvironment : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv ) -> jvmtiError > , pub GetErrorName : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , error : jvmtiError , name_ptr : * mut * mut :: std :: os :: raw :: c_char ) -> jvmtiError > , pub GetJLocationFormat : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , format_ptr : * mut jvmtiJlocationFormat ) -> jvmtiError > , pub GetSystemProperties : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , count_ptr : * mut jint , property_ptr : * mut * mut * mut :: std :: os :: raw :: c_char ) -> jvmtiError > , pub GetSystemProperty : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , property : * const :: std :: os :: raw :: c_char , value_ptr : * mut * mut :: std :: os :: raw :: c_char ) -> jvmtiError > , pub SetSystemProperty : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , property : * const :: std :: os :: raw :: c_char , value : * const :: std :: os :: raw :: c_char ) -> jvmtiError > , pub GetPhase : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , phase_ptr : * mut jvmtiPhase ) -> jvmtiError > , pub GetCurrentThreadCpuTimerInfo : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , info_ptr : * mut jvmtiTimerInfo ) -> jvmtiError > , pub GetCurrentThreadCpuTime : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , nanos_ptr : * mut jlong ) -> jvmtiError > , pub GetThreadCpuTimerInfo : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , info_ptr : * mut jvmtiTimerInfo ) -> jvmtiError > , pub GetThreadCpuTime : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , nanos_ptr : * mut jlong ) -> jvmtiError > , pub GetTimerInfo : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , info_ptr : * mut jvmtiTimerInfo ) -> jvmtiError > , pub GetTime : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , nanos_ptr : * mut jlong ) -> jvmtiError > , pub GetPotentialCapabilities : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , capabilities_ptr : * mut jvmtiCapabilities ) -> jvmtiError > , pub reserved141 : * mut :: std :: os :: raw :: c_void , pub AddCapabilities : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , capabilities_ptr : * const jvmtiCapabilities ) -> jvmtiError > , pub RelinquishCapabilities : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , capabilities_ptr : * const jvmtiCapabilities ) -> jvmtiError > , pub GetAvailableProcessors : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , processor_count_ptr : * mut jint ) -> jvmtiError > , pub GetClassVersionNumbers : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , minor_version_ptr : * mut jint , major_version_ptr : * mut jint ) -> jvmtiError > , pub GetConstantPool : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , klass : jclass , constant_pool_count_ptr : * mut jint , constant_pool_byte_count_ptr : * mut jint , constant_pool_bytes_ptr : * mut * mut :: std :: os :: raw :: c_uchar ) -> jvmtiError > , pub GetEnvironmentLocalStorage : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , data_ptr : * mut * mut :: std :: os :: raw :: c_void ) -> jvmtiError > , pub SetEnvironmentLocalStorage : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , data : * const :: std :: os :: raw :: c_void ) -> jvmtiError > , pub AddToBootstrapClassLoaderSearch : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , segment : * const :: std :: os :: raw :: c_char ) -> jvmtiError > , pub SetVerboseFlag : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , flag : jvmtiVerboseFlag , value : jboolean ) -> jvmtiError > , pub AddToSystemClassLoaderSearch : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , segment : * const :: std :: os :: raw :: c_char ) -> jvmtiError > , pub RetransformClasses : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , class_count : jint , classes : * const jclass ) -> jvmtiError > , pub GetOwnedMonitorStackDepthInfo : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , monitor_info_count_ptr : * mut jint , monitor_info_ptr : * mut * mut jvmtiMonitorStackDepthInfo ) -> jvmtiError > , pub GetObjectSize : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , object : jobject , size_ptr : * mut jlong ) -> jvmtiError > , pub GetLocalInstance : :: std :: option :: Option < unsafe extern "C" fn ( env : * mut jvmtiEnv , thread : jthread , depth : jint , value_ptr : * mut jobject ) -> jvmtiError > , } # [ test ] fn bindgen_test_layout_jvmtiInterface_1_ ( ) { assert_eq ! ( :: std :: mem :: size_of :: < jvmtiInterface_1_ > ( ) , 1240usize , concat ! ( "Size of: " , stringify ! ( jvmtiInterface_1_ ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < jvmtiInterface_1_ > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( jvmtiInterface_1_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved1 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetEventNotificationMode as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetEventNotificationMode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved3 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetAllThreads as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetAllThreads ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SuspendThread as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SuspendThread ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . ResumeThread as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( ResumeThread ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . StopThread as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( StopThread ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . InterruptThread as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( InterruptThread ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetThreadInfo as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetThreadInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetOwnedMonitorInfo as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetOwnedMonitorInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetCurrentContendedMonitor as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetCurrentContendedMonitor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . RunAgentThread as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( RunAgentThread ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetTopThreadGroups as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetTopThreadGroups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetThreadGroupInfo as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetThreadGroupInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetThreadGroupChildren as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetThreadGroupChildren ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetFrameCount as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetFrameCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetThreadState as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetThreadState ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetCurrentThread as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetCurrentThread ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetFrameLocation as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetFrameLocation ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . NotifyFramePop as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( NotifyFramePop ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetLocalObject as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetLocalObject ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetLocalInt as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetLocalInt ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetLocalLong as * const _ as usize } , 176usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetLocalLong ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetLocalFloat as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetLocalFloat ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetLocalDouble as * const _ as usize } , 192usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetLocalDouble ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetLocalObject as * const _ as usize } , 200usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetLocalObject ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetLocalInt as * const _ as usize } , 208usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetLocalInt ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetLocalLong as * const _ as usize } , 216usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetLocalLong ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetLocalFloat as * const _ as usize } , 224usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetLocalFloat ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetLocalDouble as * const _ as usize } , 232usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetLocalDouble ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . CreateRawMonitor as * const _ as usize } , 240usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( CreateRawMonitor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . DestroyRawMonitor as * const _ as usize } , 248usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( DestroyRawMonitor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . RawMonitorEnter as * const _ as usize } , 256usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( RawMonitorEnter ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . RawMonitorExit as * const _ as usize } , 264usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( RawMonitorExit ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . RawMonitorWait as * const _ as usize } , 272usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( RawMonitorWait ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . RawMonitorNotify as * const _ as usize } , 280usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( RawMonitorNotify ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . RawMonitorNotifyAll as * const _ as usize } , 288usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( RawMonitorNotifyAll ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetBreakpoint as * const _ as usize } , 296usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetBreakpoint ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . ClearBreakpoint as * const _ as usize } , 304usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( ClearBreakpoint ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved40 as * const _ as usize } , 312usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved40 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetFieldAccessWatch as * const _ as usize } , 320usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetFieldAccessWatch ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . ClearFieldAccessWatch as * const _ as usize } , 328usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( ClearFieldAccessWatch ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetFieldModificationWatch as * const _ as usize } , 336usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetFieldModificationWatch ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . ClearFieldModificationWatch as * const _ as usize } , 344usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( ClearFieldModificationWatch ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . IsModifiableClass as * const _ as usize } , 352usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( IsModifiableClass ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . Allocate as * const _ as usize } , 360usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( Allocate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . Deallocate as * const _ as usize } , 368usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( Deallocate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetClassSignature as * const _ as usize } , 376usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetClassSignature ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetClassStatus as * const _ as usize } , 384usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetClassStatus ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetSourceFileName as * const _ as usize } , 392usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetSourceFileName ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetClassModifiers as * const _ as usize } , 400usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetClassModifiers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetClassMethods as * const _ as usize } , 408usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetClassMethods ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetClassFields as * const _ as usize } , 416usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetClassFields ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetImplementedInterfaces as * const _ as usize } , 424usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetImplementedInterfaces ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . IsInterface as * const _ as usize } , 432usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( IsInterface ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . IsArrayClass as * const _ as usize } , 440usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( IsArrayClass ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetClassLoader as * const _ as usize } , 448usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetClassLoader ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetObjectHashCode as * const _ as usize } , 456usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetObjectHashCode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetObjectMonitorUsage as * const _ as usize } , 464usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetObjectMonitorUsage ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetFieldName as * const _ as usize } , 472usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetFieldName ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetFieldDeclaringClass as * const _ as usize } , 480usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetFieldDeclaringClass ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetFieldModifiers as * const _ as usize } , 488usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetFieldModifiers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . IsFieldSynthetic as * const _ as usize } , 496usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( IsFieldSynthetic ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetMethodName as * const _ as usize } , 504usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetMethodName ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetMethodDeclaringClass as * const _ as usize } , 512usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetMethodDeclaringClass ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetMethodModifiers as * const _ as usize } , 520usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetMethodModifiers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved67 as * const _ as usize } , 528usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved67 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetMaxLocals as * const _ as usize } , 536usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetMaxLocals ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetArgumentsSize as * const _ as usize } , 544usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetArgumentsSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetLineNumberTable as * const _ as usize } , 552usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetLineNumberTable ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetMethodLocation as * const _ as usize } , 560usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetMethodLocation ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetLocalVariableTable as * const _ as usize } , 568usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetLocalVariableTable ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetNativeMethodPrefix as * const _ as usize } , 576usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetNativeMethodPrefix ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetNativeMethodPrefixes as * const _ as usize } , 584usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetNativeMethodPrefixes ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetBytecodes as * const _ as usize } , 592usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetBytecodes ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . IsMethodNative as * const _ as usize } , 600usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( IsMethodNative ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . IsMethodSynthetic as * const _ as usize } , 608usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( IsMethodSynthetic ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetLoadedClasses as * const _ as usize } , 616usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetLoadedClasses ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetClassLoaderClasses as * const _ as usize } , 624usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetClassLoaderClasses ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . PopFrame as * const _ as usize } , 632usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( PopFrame ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . ForceEarlyReturnObject as * const _ as usize } , 640usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( ForceEarlyReturnObject ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . ForceEarlyReturnInt as * const _ as usize } , 648usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( ForceEarlyReturnInt ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . ForceEarlyReturnLong as * const _ as usize } , 656usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( ForceEarlyReturnLong ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . ForceEarlyReturnFloat as * const _ as usize } , 664usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( ForceEarlyReturnFloat ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . ForceEarlyReturnDouble as * const _ as usize } , 672usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( ForceEarlyReturnDouble ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . ForceEarlyReturnVoid as * const _ as usize } , 680usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( ForceEarlyReturnVoid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . RedefineClasses as * const _ as usize } , 688usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( RedefineClasses ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetVersionNumber as * const _ as usize } , 696usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetVersionNumber ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetCapabilities as * const _ as usize } , 704usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetCapabilities ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetSourceDebugExtension as * const _ as usize } , 712usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetSourceDebugExtension ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . IsMethodObsolete as * const _ as usize } , 720usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( IsMethodObsolete ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SuspendThreadList as * const _ as usize } , 728usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SuspendThreadList ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . ResumeThreadList as * const _ as usize } , 736usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( ResumeThreadList ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved94 as * const _ as usize } , 744usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved94 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved95 as * const _ as usize } , 752usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved95 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved96 as * const _ as usize } , 760usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved96 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved97 as * const _ as usize } , 768usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved97 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved98 as * const _ as usize } , 776usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved98 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved99 as * const _ as usize } , 784usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved99 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetAllStackTraces as * const _ as usize } , 792usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetAllStackTraces ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetThreadListStackTraces as * const _ as usize } , 800usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetThreadListStackTraces ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetThreadLocalStorage as * const _ as usize } , 808usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetThreadLocalStorage ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetThreadLocalStorage as * const _ as usize } , 816usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetThreadLocalStorage ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetStackTrace as * const _ as usize } , 824usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetStackTrace ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved105 as * const _ as usize } , 832usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved105 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetTag as * const _ as usize } , 840usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetTag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetTag as * const _ as usize } , 848usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetTag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . ForceGarbageCollection as * const _ as usize } , 856usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( ForceGarbageCollection ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . IterateOverObjectsReachableFromObject as * const _ as usize } , 864usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( IterateOverObjectsReachableFromObject ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . IterateOverReachableObjects as * const _ as usize } , 872usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( IterateOverReachableObjects ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . IterateOverHeap as * const _ as usize } , 880usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( IterateOverHeap ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . IterateOverInstancesOfClass as * const _ as usize } , 888usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( IterateOverInstancesOfClass ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved113 as * const _ as usize } , 896usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved113 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetObjectsWithTags as * const _ as usize } , 904usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetObjectsWithTags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . FollowReferences as * const _ as usize } , 912usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( FollowReferences ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . IterateThroughHeap as * const _ as usize } , 920usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( IterateThroughHeap ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved117 as * const _ as usize } , 928usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved117 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved118 as * const _ as usize } , 936usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved118 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved119 as * const _ as usize } , 944usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved119 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetJNIFunctionTable as * const _ as usize } , 952usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetJNIFunctionTable ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetJNIFunctionTable as * const _ as usize } , 960usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetJNIFunctionTable ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetEventCallbacks as * const _ as usize } , 968usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetEventCallbacks ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GenerateEvents as * const _ as usize } , 976usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GenerateEvents ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetExtensionFunctions as * const _ as usize } , 984usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetExtensionFunctions ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetExtensionEvents as * const _ as usize } , 992usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetExtensionEvents ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetExtensionEventCallback as * const _ as usize } , 1000usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetExtensionEventCallback ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . DisposeEnvironment as * const _ as usize } , 1008usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( DisposeEnvironment ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetErrorName as * const _ as usize } , 1016usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetErrorName ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetJLocationFormat as * const _ as usize } , 1024usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetJLocationFormat ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetSystemProperties as * const _ as usize } , 1032usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetSystemProperties ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetSystemProperty as * const _ as usize } , 1040usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetSystemProperty ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetSystemProperty as * const _ as usize } , 1048usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetSystemProperty ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetPhase as * const _ as usize } , 1056usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetPhase ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetCurrentThreadCpuTimerInfo as * const _ as usize } , 1064usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetCurrentThreadCpuTimerInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetCurrentThreadCpuTime as * const _ as usize } , 1072usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetCurrentThreadCpuTime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetThreadCpuTimerInfo as * const _ as usize } , 1080usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetThreadCpuTimerInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetThreadCpuTime as * const _ as usize } , 1088usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetThreadCpuTime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetTimerInfo as * const _ as usize } , 1096usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetTimerInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetTime as * const _ as usize } , 1104usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetTime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetPotentialCapabilities as * const _ as usize } , 1112usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetPotentialCapabilities ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . reserved141 as * const _ as usize } , 1120usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( reserved141 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . AddCapabilities as * const _ as usize } , 1128usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( AddCapabilities ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . RelinquishCapabilities as * const _ as usize } , 1136usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( RelinquishCapabilities ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetAvailableProcessors as * const _ as usize } , 1144usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetAvailableProcessors ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetClassVersionNumbers as * const _ as usize } , 1152usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetClassVersionNumbers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetConstantPool as * const _ as usize } , 1160usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetConstantPool ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetEnvironmentLocalStorage as * const _ as usize } , 1168usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetEnvironmentLocalStorage ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetEnvironmentLocalStorage as * const _ as usize } , 1176usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetEnvironmentLocalStorage ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . AddToBootstrapClassLoaderSearch as * const _ as usize } , 1184usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( AddToBootstrapClassLoaderSearch ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . SetVerboseFlag as * const _ as usize } , 1192usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( SetVerboseFlag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . AddToSystemClassLoaderSearch as * const _ as usize } , 1200usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( AddToSystemClassLoaderSearch ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . RetransformClasses as * const _ as usize } , 1208usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( RetransformClasses ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetOwnedMonitorStackDepthInfo as * const _ as usize } , 1216usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetOwnedMonitorStackDepthInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetObjectSize as * const _ as usize } , 1224usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetObjectSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < jvmtiInterface_1_ > ( ) ) ) . GetLocalInstance as * const _ as usize } , 1232usize , concat ! ( "Offset of field: " , stringify ! ( jvmtiInterface_1_ ) , "::" , stringify ! ( GetLocalInstance ) ) ) ; } pub type jvmtiInterface_1 = jvmtiInterface_1_ ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _jvmtiEnv { pub functions : * const jvmtiInterface_1_ , } # [ test ] fn bindgen_test_layout__jvmtiEnv ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _jvmtiEnv > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _jvmtiEnv ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _jvmtiEnv > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _jvmtiEnv ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _jvmtiEnv > ( ) ) ) . functions as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _jvmtiEnv ) , "::" , stringify ! ( functions ) ) ) ; } pub type __builtin_va_list = [ __va_list_tag ; 1usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __va_list_tag { pub gp_offset : :: std :: os :: raw :: c_uint , pub fp_offset : :: std :: os :: raw :: c_uint , pub overflow_arg_area : * mut :: std :: os :: raw :: c_void , pub reg_save_area : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout___va_list_tag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __va_list_tag > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __va_list_tag > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . gp_offset as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( gp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . fp_offset as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( fp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . overflow_arg_area as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( overflow_arg_area ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . reg_save_area as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( reg_save_area ) ) ) ; }